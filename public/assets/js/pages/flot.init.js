/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/pages/flot.init.js":
/*!*****************************************!*\
  !*** ./resources/js/pages/flot.init.js ***!
  \*****************************************/
/***/ (() => {

eval("/*\nTemplate Name: Ubold - Responsive Bootstrap 4 Admin Dashboard\nAuthor: CoderThemes\nWebsite: https://coderthemes.com/\nContact: support@coderthemes.com\nFile: Flot charts init js\n*/\n!function ($) {\n  \"use strict\";\n\n  var FlotChart = function FlotChart() {\n    this.$body = $(\"body\");\n    this.$realData = [];\n  }; //creates plot graph\n\n\n  FlotChart.prototype.createPlotGraph = function (selector, data1, data2, labels, colors, borderColor, bgColor) {\n    //shows tooltip\n    function showTooltip(x, y, contents) {\n      $('<div id=\"tooltip\" class=\"tooltipflot\">' + contents + '</div>').css({\n        position: 'absolute',\n        top: y + 5,\n        left: x + 5\n      }).appendTo(\"body\").fadeIn(200);\n    }\n\n    $.plot($(selector), [{\n      data: data1,\n      label: labels[0],\n      color: colors[0]\n    }, {\n      data: data2,\n      label: labels[1],\n      color: colors[1]\n    }], {\n      series: {\n        lines: {\n          show: true,\n          fill: true,\n          lineWidth: 2,\n          fillColor: {\n            colors: [{\n              opacity: 0.5\n            }, {\n              opacity: 0.5\n            }, {\n              opacity: 0.8\n            }]\n          }\n        },\n        points: {\n          show: true\n        },\n        shadowSize: 0\n      },\n      grid: {\n        hoverable: true,\n        clickable: true,\n        borderColor: borderColor,\n        tickColor: \"transparent\",\n        borderWidth: 1,\n        labelMargin: 10,\n        backgroundColor: bgColor\n      },\n      legend: {\n        position: \"ne\",\n        margin: [0, -32],\n        noColumns: 0,\n        labelBoxBorderColor: null,\n        labelFormatter: function labelFormatter(label, series) {\n          // just add some space to labes\n          return '' + label + '&nbsp;&nbsp;';\n        },\n        width: 30,\n        height: 2\n      },\n      yaxis: {\n        axisLabel: \"Daily Visits\",\n        tickColor: 'rgba(65, 80, 95, 0.07)',\n        font: {\n          color: '#8391a2'\n        }\n      },\n      xaxis: {\n        axisLabel: \"Last Days\",\n        tickColor: 'rgba(65, 80, 95, 0.07)',\n        font: {\n          color: '#8391a2'\n        }\n      },\n      tooltip: true,\n      tooltipOpts: {\n        content: '%s: Value of %x is %y',\n        shifts: {\n          x: -60,\n          y: 25\n        },\n        defaultTheme: false\n      },\n      splines: {\n        show: true,\n        tension: 0.1,\n        // float between 0 and 1, defaults to 0.5\n        lineWidth: 1 // number, defaults to 2\n\n      }\n    });\n  }, //end plot graph\n  //creates plot Dot graph\n  FlotChart.prototype.createPlotDotGraph = function (selector, data1, data2, labelsDot, colorsDot, borderColorDot, bgColorDot) {\n    //shows tooltip\n    function showTooltip(x, y, contents) {\n      $('<div id=\"tooltip\" class=\"tooltipflot\">' + contents + '</div>').css({\n        position: 'absolute',\n        top: y + 5,\n        left: x + 5\n      }).appendTo(\"body\").fadeIn(200);\n    }\n\n    $.plot($(selector), [{\n      data: data1,\n      label: labelsDot[0],\n      color: colorsDot[0]\n    }, {\n      data: data2,\n      label: labelsDot[1],\n      color: colorsDot[1]\n    }], {\n      series: {\n        lines: {\n          show: true,\n          fill: false,\n          lineWidth: 3,\n          fillColor: {\n            colors: [{\n              opacity: 0.3\n            }, {\n              opacity: 0.3\n            }]\n          }\n        },\n        curvedLines: {\n          apply: true,\n          active: true,\n          monotonicFit: true\n        },\n        splines: {\n          show: true,\n          tension: 0.4,\n          lineWidth: 5,\n          fill: 0.4\n        }\n      },\n      grid: {\n        hoverable: true,\n        clickable: true,\n        borderColor: borderColorDot,\n        tickColor: \"#f9f9f9\",\n        borderWidth: 1,\n        labelMargin: 10,\n        backgroundColor: bgColorDot\n      },\n      legend: {\n        position: \"ne\",\n        margin: [0, -32],\n        noColumns: 0,\n        labelBoxBorderColor: null,\n        labelFormatter: function labelFormatter(label, series) {\n          // just add some space to labes\n          return '' + label + '&nbsp;&nbsp;';\n        },\n        width: 30,\n        height: 2\n      },\n      yaxis: {\n        axisLabel: \"Gold Price(USD)\",\n        tickColor: 'rgba(65, 80, 95, 0.07)',\n        font: {\n          color: '#8391a2'\n        }\n      },\n      xaxis: {\n        axisLabel: \"Numbers\",\n        tickColor: 'rgba(65, 80, 95, 0.07)',\n        font: {\n          color: '#8391a2'\n        }\n      },\n      tooltip: false\n    });\n  }, //end plot Dot graph\n  //creates Pie Chart\n  FlotChart.prototype.createPieGraph = function (selector, labels, datas, colors) {\n    var data = [{\n      label: labels[0],\n      data: datas[0]\n    }, {\n      label: labels[1],\n      data: datas[1]\n    }, {\n      label: labels[2],\n      data: datas[2]\n    }, {\n      label: labels[3],\n      data: datas[3]\n    }, {\n      label: labels[4],\n      data: datas[4]\n    }];\n    var options = {\n      series: {\n        pie: {\n          show: true,\n          radius: 1,\n          label: {\n            show: true,\n            radius: 1,\n            background: {\n              opacity: 0.2\n            }\n          }\n        }\n      },\n      legend: {\n        show: false\n      },\n      grid: {\n        hoverable: true,\n        clickable: true\n      },\n      colors: colors,\n      tooltip: true,\n      tooltipOpts: {\n        content: \"%s, %p.0%\"\n      }\n    };\n    $.plot($(selector), data, options);\n  }, //returns some random data\n  FlotChart.prototype.randomData = function () {\n    var totalPoints = 300;\n    if (this.$realData.length > 0) this.$realData = this.$realData.slice(1); // Do a random walk\n\n    while (this.$realData.length < totalPoints) {\n      var prev = this.$realData.length > 0 ? this.$realData[this.$realData.length - 1] : 50,\n          y = prev + Math.random() * 10 - 5;\n\n      if (y < 0) {\n        y = 0;\n      } else if (y > 100) {\n        y = 100;\n      }\n\n      this.$realData.push(y);\n    } // Zip the generated y values with the x values\n\n\n    var res = [];\n\n    for (var i = 0; i < this.$realData.length; ++i) {\n      res.push([i, this.$realData[i]]);\n    }\n\n    return res;\n  }, FlotChart.prototype.createRealTimeGraph = function (selector, data, colors) {\n    var plot = $.plot(selector, [data], {\n      colors: colors,\n      series: {\n        grow: {\n          active: false\n        },\n        //disable auto grow\n        shadowSize: 0,\n        // drawing is faster without shadows\n        lines: {\n          show: true,\n          fill: true,\n          lineWidth: 2,\n          steps: false\n        }\n      },\n      grid: {\n        show: true,\n        aboveData: false,\n        color: '#8391a2',\n        labelMargin: 15,\n        axisMargin: 0,\n        borderWidth: 0,\n        borderColor: null,\n        minBorderMargin: 5,\n        clickable: true,\n        hoverable: true,\n        autoHighlight: false,\n        mouseActiveRadius: 20\n      },\n      tooltip: true,\n      //activate tooltip\n      tooltipOpts: {\n        content: \"Value is : %y.0\" + \"%\",\n        shifts: {\n          x: -30,\n          y: -50\n        }\n      },\n      yaxis: {\n        axisLabel: \"Response Time (ms)\",\n        min: 0,\n        max: 100,\n        tickColor: 'rgba(65, 80, 95, 0.07)',\n        color: '#8391a2'\n      },\n      xaxis: {\n        axisLabel: \"Point Value (1000)\",\n        show: true,\n        tickColor: 'rgba(65, 80, 95, 0.07)',\n        color: '#8391a2'\n      }\n    });\n    return plot;\n  }, //creates Donut Chart\n  FlotChart.prototype.createDonutGraph = function (selector, labels, datas, colors) {\n    var data = [{\n      label: labels[0],\n      data: datas[0]\n    }, {\n      label: labels[1],\n      data: datas[1]\n    }, {\n      label: labels[2],\n      data: datas[2]\n    }, {\n      label: labels[3],\n      data: datas[3]\n    }, {\n      label: labels[4],\n      data: datas[4]\n    }];\n    var options = {\n      series: {\n        pie: {\n          show: true,\n          innerRadius: 0.5\n        }\n      },\n      legend: {\n        show: false,\n        labelFormatter: function labelFormatter(label, series) {\n          return '<div style=\"font-size:14px;\">&nbsp;' + label + '</div>';\n        },\n        labelBoxBorderColor: null,\n        margin: 50,\n        width: 20\n      },\n      grid: {\n        hoverable: false,\n        clickable: false\n      },\n      colors: colors,\n      tooltip: false\n    };\n    $.plot($(selector), data, options);\n  }, //creates Bar Chart\n  FlotChart.prototype.createStackBarGraph = function (selector, ticks, colors, data) {\n    var options = {\n      bars: {\n        show: true,\n        barWidth: 0.2,\n        fill: 1\n      },\n      grid: {\n        show: true,\n        aboveData: false,\n        labelMargin: 5,\n        axisMargin: 0,\n        borderWidth: 1,\n        minBorderMargin: 5,\n        clickable: true,\n        hoverable: true,\n        autoHighlight: false,\n        mouseActiveRadius: 20,\n        borderColor: 'rgba(65, 80, 95, 0.07)'\n      },\n      series: {\n        stack: 0\n      },\n      legend: {\n        position: \"ne\",\n        margin: [0, -32],\n        noColumns: 0,\n        labelBoxBorderColor: null,\n        labelFormatter: function labelFormatter(label, series) {\n          // just add some space to labes\n          return '' + label + '&nbsp;&nbsp;';\n        },\n        width: 30,\n        height: 2\n      },\n      yaxis: ticks.y,\n      xaxis: ticks.x,\n      colors: colors,\n      tooltip: true,\n      //activate tooltip\n      tooltipOpts: {\n        content: \"%s : %y.0\",\n        shifts: {\n          x: -30,\n          y: -50\n        }\n      }\n    };\n    $.plot($(selector), data, options);\n  }, //creates Line Chart\n  FlotChart.prototype.createLineGraph = function (selector, ticks, colors, data) {\n    var options = {\n      series: {\n        lines: {\n          show: true\n        },\n        points: {\n          show: true\n        }\n      },\n      legend: {\n        position: \"ne\",\n        margin: [0, -32],\n        noColumns: 0,\n        labelBoxBorderColor: null,\n        labelFormatter: function labelFormatter(label, series) {\n          // just add some space to labes\n          return '' + label + '&nbsp;&nbsp;';\n        },\n        width: 30,\n        height: 2\n      },\n      yaxis: ticks.y,\n      xaxis: ticks.x,\n      colors: colors,\n      grid: {\n        hoverable: true,\n        borderColor: 'rgba(65, 80, 95, 0.07)',\n        borderWidth: 1,\n        backgroundColor: 'transparent'\n      },\n      tooltip: true,\n      //activate tooltip\n      tooltipOpts: {\n        content: \"%s : %y.0\",\n        shifts: {\n          x: -30,\n          y: -50\n        }\n      }\n    };\n    return $.plot($(selector), data, options);\n  }, //creates Combine Chart\n  FlotChart.prototype.createCombineGraph = function (selector, ticks, labels, datas, colors) {\n    var data = [{\n      label: labels[0],\n      data: datas[0],\n      color: colors[0],\n      lines: {\n        show: true,\n        fill: true\n      },\n      points: {\n        show: true\n      }\n    }, {\n      label: labels[1],\n      data: datas[1],\n      color: colors[1],\n      lines: {\n        show: true\n      },\n      points: {\n        show: true\n      }\n    }, {\n      label: labels[2],\n      data: datas[2],\n      color: colors[2],\n      bars: {\n        show: true\n      }\n    }];\n    var options = {\n      series: {\n        shadowSize: 0\n      },\n      grid: {\n        hoverable: true,\n        clickable: true,\n        tickColor: \"#f9f9f9\",\n        borderWidth: 1,\n        borderColor: \"rgba(65, 80, 95, 0.07)\"\n      },\n      tooltip: true,\n      colors: colors,\n      tooltipOpts: {\n        defaultTheme: false\n      },\n      legend: {\n        position: \"ne\",\n        margin: [0, -32],\n        noColumns: 0,\n        labelBoxBorderColor: null,\n        labelFormatter: function labelFormatter(label, series) {\n          // just add some space to labes\n          return '' + label + '&nbsp;&nbsp;';\n        },\n        width: 30,\n        height: 2\n      },\n      yaxis: {\n        axisLabel: \"Point Value (1000)\",\n        tickColor: 'rgba(65, 80, 95, 0.07)',\n        font: {\n          color: '#8391a2'\n        }\n      },\n      xaxis: {\n        axisLabel: \"Daily Hours\",\n        ticks: ticks,\n        tickColor: 'rgba(65, 80, 95, 0.07)',\n        font: {\n          color: '#8391a2'\n        }\n      }\n    };\n    $.plot($(selector), data, options);\n  }, //initializing various charts and components\n  FlotChart.prototype.init = function () {\n    //plot graph data\n    var uploads = [[0, 13], [1, 22], [2, 27], [3, 36], [4, 40], [5, 25], [6, 36], [7, 20], [8, 12], [9, 20], [10, 48], [11, 16], [12, 14]];\n    var downloads = [[0, 28], [1, 56], [2, 26], [3, 20], [4, 21], [5, 25], [6, 19], [7, 22], [8, 35], [9, 28], [10, 36], [11, 19], [12, 11]];\n    var plabels = [\"Bitcoin\", \"Ethereum\", \"Litecoin\"];\n    var colors = ['#4fc6e1', '#6658dd'];\n    var dataColors = $(\"#website-stats\").data('colors');\n\n    if (dataColors) {\n      colors = dataColors.split(\",\");\n    }\n\n    var borderColor = 'rgba(65, 80, 95, 0.07)';\n    var bgColor = 'transparent';\n    this.createPlotGraph(\"#website-stats\", uploads, downloads, plabels, colors, borderColor, bgColor); //plot graph Dot data\n\n    var uploadsDot = [[0, 2], [1, 4], [2, 7], [3, 9], [4, 6], [5, 3], [6, 10], [7, 8], [8, 5], [9, 14], [10, 10], [11, 10], [12, 8]];\n    var downloadsDot = [[0, 1], [1, 3], [2, 6], [3, 7], [4, 4], [5, 2], [6, 8], [7, 6], [8, 4], [9, 10], [10, 8], [11, 14], [12, 5]];\n    var plabelsDot = [\"Bitcoin\", \"Ethereum\"];\n    var colors = ['#6658dd', '#f1556c'];\n    var dataColors = $(\"#website-stats1\").data('colors');\n\n    if (dataColors) {\n      colors = dataColors.split(\",\");\n    }\n\n    var borderColorDot = 'rgba(65, 80, 95, 0.07)';\n    var bgColorDot = 'transparent';\n    this.createPlotDotGraph(\"#website-stats1\", uploadsDot, downloadsDot, plabelsDot, colors, borderColorDot, bgColorDot); //Pie graph data\n\n    var pielabels = [\"Bitcoin\", \"Ethereum\", \"Litecoin\", \"Bitcoin Cash\", \"Cardano\"];\n    var datas = [48, 30, 15, 32, 26];\n    var colors = ['#4a81d4', '#f672a7', '#f7b84b', '#4fc6e1', \"#1abc9c\"];\n    var dataColors = $(\"#pie-chart\").data('colors');\n\n    if (dataColors) {\n      colors = dataColors.split(\",\");\n    }\n\n    this.createPieGraph(\"#pie-chart\", pielabels, datas, colors); //real time data representation\n\n    var colors = ['#4a81d4'];\n    var dataColors = $(\"#flotRealTime\").data('colors');\n\n    if (dataColors) {\n      colors = dataColors.split(\",\");\n    }\n\n    var plot = this.createRealTimeGraph('#flotRealTime', this.randomData(), [colors]);\n    plot.draw();\n    var $this = this;\n\n    function updatePlot() {\n      plot.setData([$this.randomData()]); // Since the axes don't change, we don't need to call plot.setupGrid()\n\n      plot.draw();\n      setTimeout(updatePlot, $('html').hasClass('mobile-device') ? 500 : 500);\n    }\n\n    updatePlot(); //Donut pie graph data\n\n    var donutlabels = [\"Bitcoin\", \"Ethereum\", \"Litecoin\", \"Bitcoin Cash\", \"Cardano\"];\n    var donutdatas = [48, 30, 15, 32, 26];\n    var colors = ['#4a81d4', '#f672a7', '#f7b84b', '#4fc6e1', \"#1abc9c\"];\n    var dataColors = $(\"#donut-chart\").data('colors');\n\n    if (dataColors) {\n      colors = dataColors.split(\",\");\n    }\n\n    this.createDonutGraph(\"#donut-chart\", donutlabels, donutdatas, colors); //Combine graph data\n\n    var data24Hours = [[0, 201], [1, 520], [2, 337], [3, 261], [4, 157], [5, 95], [6, 200], [7, 250], [8, 320], [9, 500], [10, 152], [11, 214], [12, 364], [13, 449], [14, 558], [15, 282], [16, 379], [17, 429], [18, 518], [19, 470], [20, 330], [21, 245], [22, 358], [23, 74]];\n    var data48Hours = [[0, 311], [1, 630], [2, 447], [3, 371], [4, 267], [5, 205], [6, 310], [7, 360], [8, 430], [9, 610], [10, 262], [11, 324], [12, 474], [13, 559], [14, 668], [15, 392], [16, 489], [17, 539], [18, 628], [19, 580], [20, 440], [21, 355], [22, 468], [23, 184]];\n    var dataDifference = [[23, 727], [22, 128], [21, 110], [20, 92], [19, 172], [18, 63], [17, 150], [16, 592], [15, 12], [14, 246], [13, 52], [12, 149], [11, 123], [10, 2], [9, 325], [8, 10], [7, 15], [6, 89], [5, 65], [4, 77], [3, 600], [2, 200], [1, 385], [0, 200]];\n    var ticks = [[0, \"22h\"], [1, \"\"], [2, \"00h\"], [3, \"\"], [4, \"02h\"], [5, \"\"], [6, \"04h\"], [7, \"\"], [8, \"06h\"], [9, \"\"], [10, \"08h\"], [11, \"\"], [12, \"10h\"], [13, \"\"], [14, \"12h\"], [15, \"\"], [16, \"14h\"], [17, \"\"], [18, \"16h\"], [19, \"\"], [20, \"18h\"], [21, \"\"], [22, \"20h\"], [23, \"\"]];\n    var combinelabels = [\"Last 24 Hours\", \"Last 48 Hours\", \"Difference\"];\n    var combinedatas = [data24Hours, data48Hours, dataDifference];\n    var colors = ['#e3eaef', '#f1556c', '#1abc9c'];\n    var dataColors = $(\"#combine-chart\").data('colors');\n\n    if (dataColors) {\n      colors = dataColors.split(\",\");\n    }\n\n    this.createCombineGraph(\"#combine-chart\", ticks, combinelabels, combinedatas, colors); //bar chart = stacked\n\n    var stack_ticks = {\n      y: {\n        axisLabel: \"Sales Value (USD)\",\n        tickColor: 'rgba(65, 80, 95, 0.07)',\n        font: {\n          color: '#8391a2'\n        }\n      },\n      x: {\n        axisLabel: \"Last 10 Days\",\n        tickColor: 'rgba(65, 80, 95, 0.07)',\n        font: {\n          color: '#8391a2'\n        }\n      }\n    }; //random data\n\n    var d1 = [];\n\n    for (var i = 0; i <= 10; i += 1) {\n      d1.push([i, parseInt(Math.random() * 30)]);\n    }\n\n    var d2 = [];\n\n    for (var i = 0; i <= 10; i += 1) {\n      d2.push([i, parseInt(Math.random() * 30)]);\n    }\n\n    var d3 = [];\n\n    for (var i = 0; i <= 10; i += 1) {\n      d3.push([i, parseInt(Math.random() * 30)]);\n    }\n\n    var ds = new Array();\n    ds.push({\n      label: \"Series One\",\n      data: d1,\n      bars: {\n        order: 1\n      }\n    });\n    ds.push({\n      label: \"Series Two\",\n      data: d2,\n      bars: {\n        order: 2\n      }\n    });\n    ds.push({\n      label: \"Series Three\",\n      data: d3,\n      bars: {\n        order: 3\n      }\n    });\n    var colors = ['#4fc6e1', '#f7b84b', '#4a81d4'];\n    var dataColors = $(\"#ordered-bars-chart\").data('colors');\n\n    if (dataColors) {\n      colors = dataColors.split(\",\");\n    }\n\n    this.createStackBarGraph(\"#ordered-bars-chart\", stack_ticks, colors, ds); //creating line chart\n\n    var line_ticks = {\n      y: {\n        min: -1.2,\n        max: 1.2,\n        tickColor: 'rgba(65, 80, 95, 0.07)',\n        font: {\n          color: '#8391a2'\n        }\n      },\n      x: {\n        tickColor: 'rgba(65, 80, 95, 0.07)',\n        font: {\n          color: '#8391a2'\n        }\n      }\n    }; //sample data\n\n    var sin = [],\n        cos = [];\n    var offset = 0;\n\n    for (var i = 0; i < 12; i += 0.2) {\n      sin.push([i, Math.sin(i + offset)]);\n      cos.push([i, Math.cos(i + offset)]);\n    }\n\n    var line_data = [{\n      data: sin,\n      label: \"Google\"\n    }, {\n      data: cos,\n      label: \"Yahoo\"\n    }];\n    var colors = ['#6c757d', '#f1556c'];\n    var dataColors = $(\"#line-chart-alt\").data('colors');\n\n    if (dataColors) {\n      colors = dataColors.split(\",\");\n    }\n\n    this.createLineGraph(\"#line-chart-alt\", line_ticks, colors, line_data);\n  }, //init flotchart\n  $.FlotChart = new FlotChart(), $.FlotChart.Constructor = FlotChart;\n}(window.jQuery), //initializing flotchart\nfunction ($) {\n  \"use strict\";\n\n  $.FlotChart.init();\n}(window.jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/pages/flot.init.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/pages/flot.init.js"]();
/******/ 	
/******/ })()
;