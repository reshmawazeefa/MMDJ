/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/pages/mapeal-maps.init.js":
/*!************************************************!*\
  !*** ./resources/js/pages/mapeal-maps.init.js ***!
  \************************************************/
/***/ (() => {

eval("/*\nTemplate Name: Ubold - Responsive Bootstrap 4 Admin Dashboard\nAuthor: CoderThemes\nWebsite: https://coderthemes.com/\nContact: support@coderthemes.com\nFile: Mapeal maps init js\n*/\n$(function () {\n  //USA Map\n  $mapusa = $(\".map-usa\");\n  $mapusa.mapael({\n    map: {\n      name: \"usa_states\",\n      defaultArea: {\n        attrs: {\n          fill: \"#38414a\",\n          stroke: \"#e3eaef\"\n        },\n        attrsHover: {\n          fill: \"#4a81d4\"\n        }\n      },\n      zoom: {\n        enabled: true,\n        maxLevel: 10\n      }\n    },\n    legend: {\n      plot: {\n        title: \"American cities\",\n        slices: [{\n          size: 24,\n          attrs: {\n            fill: \"#4a81d4\"\n          },\n          label: \"Product One\",\n          sliceValue: \"Value 1\"\n        }, {\n          size: 24,\n          attrs: {\n            fill: \"#4fc6e1\"\n          },\n          label: \"Product Two\",\n          sliceValue: \"Value 2\"\n        }, {\n          size: 24,\n          attrs: {\n            fill: \"#f1556c\"\n          },\n          label: \"Product Three\",\n          sliceValue: \"Value 3\"\n        }]\n      }\n    },\n    plots: {\n      'ny': {\n        latitude: 40.717079,\n        longitude: -74.00116,\n        tooltip: {\n          content: \"New York\"\n        },\n        value: \"Value 3\"\n      },\n      'an': {\n        latitude: 61.2108398,\n        longitude: -149.9019557,\n        tooltip: {\n          content: \"Anchorage\"\n        },\n        value: \"Value 3\"\n      },\n      'sf': {\n        latitude: 37.792032,\n        longitude: -122.394613,\n        tooltip: {\n          content: \"San Francisco\"\n        },\n        value: \"Value 1\"\n      },\n      'pa': {\n        latitude: 19.493204,\n        longitude: -154.8199569,\n        tooltip: {\n          content: \"Pahoa\"\n        },\n        value: \"Value 2\"\n      },\n      'la': {\n        latitude: 34.025052,\n        longitude: -118.192006,\n        tooltip: {\n          content: \"Los Angeles\"\n        },\n        value: \"Value 3\"\n      },\n      'dallas': {\n        latitude: 32.784881,\n        longitude: -96.808244,\n        tooltip: {\n          content: \"Dallas\"\n        },\n        value: \"Value 2\"\n      },\n      'miami': {\n        latitude: 25.789125,\n        longitude: -80.205674,\n        tooltip: {\n          content: \"Miami\"\n        },\n        value: \"Value 3\"\n      },\n      'washington': {\n        latitude: 38.905761,\n        longitude: -77.020746,\n        tooltip: {\n          content: \"Washington\"\n        },\n        value: \"Value 2\"\n      },\n      'seattle': {\n        latitude: 47.599571,\n        longitude: -122.319426,\n        tooltip: {\n          content: \"Seattle\"\n        },\n        value: \"Value 1\"\n      }\n    }\n  }); // Zoom on mousewheel with mousewheel jQuery plugin\n\n  $mapusa.on(\"mousewheel\", function (e) {\n    if (e.deltaY > 0) {\n      $mapusa.trigger(\"zoom\", $mapusa.data(\"zoomLevel\") + 1);\n      console.log(\"zoom\");\n    } else {\n      $mapusa.trigger(\"zoom\", $mapusa.data(\"zoomLevel\") - 1);\n    }\n\n    return false;\n  });\n  $(\".mapcontainer\").mapael({\n    map: {\n      name: \"world_countries\",\n      defaultArea: {\n        attrs: {\n          fill: \"#38414a\",\n          stroke: \"#7c8e9a\"\n        },\n        attrsHover: {\n          fill: \"#4a81d4\",\n          stroke: \"#4a81d4\"\n        }\n      } // Default attributes can be set for all links\n      ,\n      defaultLink: {\n        factor: 0.4,\n        attrsHover: {\n          stroke: \"#f06292\"\n        }\n      },\n      defaultPlot: {\n        text: {\n          attrs: {\n            fill: \"#98a6ad\"\n          },\n          attrsHover: {\n            fill: \"#98a6ad\"\n          }\n        }\n      }\n    },\n    plots: {\n      'paris': {\n        latitude: 48.86,\n        longitude: 2.3444,\n        tooltip: {\n          content: \"Paris<br />Population: 500000000\"\n        }\n      },\n      'newyork': {\n        latitude: 40.667,\n        longitude: -73.833,\n        tooltip: {\n          content: \"New york<br />Population: 200001\"\n        }\n      },\n      'sanfrancisco': {\n        latitude: 37.792032,\n        longitude: -122.394613,\n        tooltip: {\n          content: \"San Francisco\"\n        }\n      },\n      'brasilia': {\n        latitude: -15.781682,\n        longitude: -47.924195,\n        tooltip: {\n          content: \"Brasilia<br />Population: 200000001\"\n        }\n      },\n      'roma': {\n        latitude: 41.827637,\n        longitude: 12.462732,\n        tooltip: {\n          content: \"Roma\"\n        }\n      },\n      'miami': {\n        latitude: 25.789125,\n        longitude: -80.205674,\n        tooltip: {\n          content: \"Miami\"\n        }\n      },\n      // Size=0 in order to make plots invisible\n      'tokyo': {\n        latitude: 35.687418,\n        longitude: 139.692306,\n        size: 0,\n        text: {\n          content: 'Tokyo'\n        }\n      },\n      'sydney': {\n        latitude: -33.917,\n        longitude: 151.167,\n        size: 0,\n        text: {\n          content: 'Sydney'\n        }\n      },\n      'plot1': {\n        latitude: 22.906561,\n        longitude: 86.840170,\n        size: 0,\n        text: {\n          content: 'Plot1',\n          position: 'left',\n          margin: 5\n        }\n      },\n      'plot2': {\n        latitude: -0.390553,\n        longitude: 115.586762,\n        size: 0,\n        text: {\n          content: 'Plot2'\n        }\n      },\n      'plot3': {\n        latitude: 44.065626,\n        longitude: 94.576079,\n        size: 0,\n        text: {\n          content: 'Plot3'\n        }\n      }\n    },\n    // Links allow you to connect plots between them\n    links: {\n      'link1': {\n        factor: -0.3 // The source and the destination of the link can be set with a latitude and a longitude or a x and a y ...\n        ,\n        between: [{\n          latitude: 24.708785,\n          longitude: -5.402427\n        }, {\n          x: 560,\n          y: 280\n        }],\n        attrs: {\n          \"stroke-width\": 2\n        },\n        tooltip: {\n          content: \"Link\"\n        }\n      },\n      'parisnewyork': {\n        // ... Or with IDs of plotted points\n        factor: -0.3,\n        between: ['paris', 'newyork'],\n        attrs: {\n          \"stroke-width\": 2\n        },\n        tooltip: {\n          content: \"Paris - New-York\"\n        }\n      },\n      'parissanfrancisco': {\n        // The curve can be inverted by setting a negative factor\n        factor: -0.5,\n        between: ['paris', 'sanfrancisco'],\n        attrs: {\n          \"stroke-width\": 4\n        },\n        tooltip: {\n          content: \"Paris - San - Francisco\"\n        }\n      },\n      'parisbrasilia': {\n        factor: -0.8,\n        between: ['paris', 'brasilia'],\n        attrs: {\n          \"stroke-width\": 1\n        },\n        tooltip: {\n          content: \"Paris - Brasilia\"\n        }\n      },\n      'romamiami': {\n        factor: 0.2,\n        between: ['roma', 'miami'],\n        attrs: {\n          \"stroke-width\": 4\n        },\n        tooltip: {\n          content: \"Roma - Miami\"\n        }\n      },\n      'sydneyplot1': {\n        factor: -0.2,\n        between: ['sydney', 'plot1'],\n        attrs: {\n          stroke: \"#6658dd\",\n          \"stroke-width\": 3,\n          \"stroke-linecap\": \"round\",\n          opacity: 0.6\n        },\n        tooltip: {\n          content: \"Sydney - Plot1\"\n        }\n      },\n      'sydneyplot2': {\n        factor: -0.1,\n        between: ['sydney', 'plot2'],\n        attrs: {\n          stroke: \"#6658dd\",\n          \"stroke-width\": 8,\n          \"stroke-linecap\": \"round\",\n          opacity: 0.6\n        },\n        tooltip: {\n          content: \"Sydney - Plot2\"\n        }\n      },\n      'sydneyplot3': {\n        factor: 0.2,\n        between: ['sydney', 'plot3'],\n        attrs: {\n          stroke: \"#6658dd\",\n          \"stroke-width\": 4,\n          \"stroke-linecap\": \"round\",\n          opacity: 0.6\n        },\n        tooltip: {\n          content: \"Sydney - Plot3\"\n        }\n      },\n      'sydneytokyo': {\n        factor: 0.2,\n        between: ['sydney', 'tokyo'],\n        attrs: {\n          stroke: \"#6658dd\",\n          \"stroke-width\": 6,\n          \"stroke-linecap\": \"round\",\n          opacity: 0.6\n        },\n        tooltip: {\n          content: \"Sydney - Plot2\"\n        }\n      }\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/pages/mapeal-maps.init.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/pages/mapeal-maps.init.js"]();
/******/ 	
/******/ })()
;