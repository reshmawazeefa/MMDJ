/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/pages/apexcharts.init.js":
/*!***********************************************!*\
  !*** ./resources/js/pages/apexcharts.init.js ***!
  \***********************************************/
/***/ (() => {

eval("function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\nTemplate Name: UBold - Responsive Bootstrap 4 Admin Dashboard\nAuthor: CoderThemes\nWebsite: https://coderthemes.com/\nContact: support@coderthemes.com\nFile: Apex Charts\n*/\nApex.grid = {\n  padding: {\n    right: 0,\n    left: 0\n  }\n};\nApex.dataLabels = {\n  enabled: false\n};\n\nvar randomizeArray = function randomizeArray(arg) {\n  var array = arg.slice();\n  var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}; // data for the sparklines that appear below header area\n\n\nvar sparklineData = [47, 45, 54, 38, 56, 24, 65, 31, 37, 39, 62, 51, 35, 41, 35, 27, 93, 53, 61, 27, 54, 43, 19, 46]; // the default colorPalette for this dashboard\n//var colorPalette = ['#01BFD6', '#5564BE', '#F7A600', '#EDCD24', '#F74F58'];\n\nvar colorPalette = [\"#00D8B6\", \"#008FFB\", \"#FEB019\", \"#FF4560\", \"#775DD0\"];\nvar colors = [\"#6658dd\"];\nvar dataColors = $(\"#spark1\").data(\"colors\");\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar spark1 = {\n  chart: {\n    type: \"area\",\n    height: 160,\n    sparkline: {\n      enabled: true\n    }\n  },\n  stroke: {\n    width: 2,\n    curve: \"straight\"\n  },\n  fill: {\n    opacity: 0.2\n  },\n  series: [{\n    name: \"UBold Sales \",\n    data: randomizeArray(sparklineData)\n  }],\n  yaxis: {\n    min: 0\n  },\n  colors: colors,\n  title: {\n    text: \"$424,652\",\n    offsetX: 10,\n    style: {\n      fontSize: \"22px\"\n    }\n  },\n  subtitle: {\n    text: \"Total Sales\",\n    offsetX: 10,\n    offsetY: 35,\n    style: {\n      fontSize: \"13px\"\n    }\n  }\n};\nnew ApexCharts(document.querySelector(\"#spark1\"), spark1).render();\nvar colors = [\"#DCE6EC\"];\nvar dataColors = $(\"#spark2\").data(\"colors\");\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar spark2 = {\n  chart: {\n    type: \"area\",\n    height: 160,\n    sparkline: {\n      enabled: true\n    }\n  },\n  stroke: {\n    width: 2,\n    curve: \"straight\"\n  },\n  fill: {\n    opacity: 0.2\n  },\n  series: [{\n    name: \"UBold Expenses \",\n    data: randomizeArray(sparklineData)\n  }],\n  yaxis: {\n    min: 0\n  },\n  colors: colors,\n  title: {\n    text: \"$235,312\",\n    offsetX: 10,\n    style: {\n      fontSize: \"22px\"\n    }\n  },\n  subtitle: {\n    text: \"Expenses\",\n    offsetX: 10,\n    offsetY: 35,\n    style: {\n      fontSize: \"13px\"\n    }\n  }\n};\nnew ApexCharts(document.querySelector(\"#spark2\"), spark2).render(); // Sparkline 2\n\nvar colors = [\"#f672a7\"];\nvar dataColors = $(\"#spark3\").data(\"colors\");\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar spark3 = {\n  chart: {\n    type: \"area\",\n    height: 160,\n    sparkline: {\n      enabled: true\n    }\n  },\n  stroke: {\n    width: 2,\n    curve: \"straight\"\n  },\n  fill: {\n    opacity: 0.2\n  },\n  series: [{\n    name: \"Net Profits \",\n    data: randomizeArray(sparklineData)\n  }],\n  xaxis: {\n    crosshairs: {\n      width: 1\n    }\n  },\n  yaxis: {\n    min: 0\n  },\n  colors: colors,\n  title: {\n    text: \"$135,965\",\n    offsetX: 10,\n    style: {\n      fontSize: \"22px\"\n    }\n  },\n  subtitle: {\n    text: \"Profits\",\n    offsetX: 10,\n    offsetY: 35,\n    style: {\n      fontSize: \"13px\"\n    }\n  }\n};\nnew ApexCharts(document.querySelector(\"#spark3\"), spark3).render(); //\n// Line with Data Labels\n//\n\nvar colors = [\"#6658dd\", \"#1abc9c\"];\nvar dataColors = $(\"#apex-line-1\").data(\"colors\");\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 380,\n    type: \"line\",\n    zoom: {\n      enabled: false\n    },\n    toolbar: {\n      show: false\n    }\n  },\n  colors: colors,\n  dataLabels: {\n    enabled: true\n  },\n  stroke: {\n    width: [3, 3],\n    curve: \"smooth\"\n  },\n  series: [{\n    name: \"High - 2018\",\n    data: [28, 29, 33, 36, 32, 32, 33]\n  }, {\n    name: \"Low - 2018\",\n    data: [12, 11, 14, 18, 17, 13, 13]\n  }],\n  title: {\n    text: \"Average High & Low Temperature\",\n    align: \"left\",\n    style: {\n      fontSize: \"14px\",\n      color: \"#666\"\n    }\n  },\n  grid: {\n    row: {\n      colors: [\"transparent\", \"transparent\"],\n      // takes an array which will be repeated on columns\n      opacity: 0.2\n    },\n    borderColor: \"#f1f3fa\"\n  },\n  markers: {\n    style: \"inverted\",\n    size: 6\n  },\n  xaxis: {\n    categories: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\"],\n    title: {\n      text: \"Month\"\n    }\n  },\n  yaxis: {\n    title: {\n      text: \"Temperature\"\n    },\n    min: 5,\n    max: 40\n  },\n  legend: {\n    position: \"top\",\n    horizontalAlign: \"right\",\n    floating: true,\n    offsetY: -25,\n    offsetX: -5\n  },\n  responsive: [{\n    breakpoint: 600,\n    options: {\n      chart: {\n        toolbar: {\n          show: false\n        }\n      },\n      legend: {\n        show: false\n      }\n    }\n  }]\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-line-1\"), options);\nchart.render(); //\n// Gradient Line Chart\n//\n\nvar colors = [\"#f672a7\"];\nvar dataColors = $(\"#apex-line-2\").data(\"colors\");\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 380,\n    type: \"line\",\n    shadow: {\n      enabled: false,\n      color: \"#bbb\",\n      top: 3,\n      left: 2,\n      blur: 3,\n      opacity: 1\n    }\n  },\n  stroke: {\n    width: 5,\n    curve: \"smooth\"\n  },\n  series: [{\n    name: \"Likes\",\n    data: [4, 3, 10, 9, 29, 19, 22, 9, 12, 7, 19, 5, 13, 9, 17, 2, 7, 5]\n  }],\n  xaxis: {\n    type: \"datetime\",\n    categories: [\"1/11/2000\", \"2/11/2000\", \"3/11/2000\", \"4/11/2000\", \"5/11/2000\", \"6/11/2000\", \"7/11/2000\", \"8/11/2000\", \"9/11/2000\", \"10/11/2000\", \"11/11/2000\", \"12/11/2000\", \"1/11/2001\", \"2/11/2001\", \"3/11/2001\", \"4/11/2001\", \"5/11/2001\", \"6/11/2001\"]\n  },\n  title: {\n    text: \"Social Media\",\n    align: \"left\",\n    style: {\n      fontSize: \"14px\",\n      color: \"#666\"\n    }\n  },\n  fill: {\n    type: \"gradient\",\n    gradient: {\n      shade: \"dark\",\n      gradientToColors: colors,\n      shadeIntensity: 1,\n      type: \"horizontal\",\n      opacityFrom: 1,\n      opacityTo: 1,\n      stops: [0, 100, 100, 100]\n    }\n  },\n  markers: {\n    size: 4,\n    opacity: 0.9,\n    colors: [\"#56c2d6\"],\n    strokeColor: \"#fff\",\n    strokeWidth: 2,\n    style: \"inverted\",\n    // full, hollow, inverted\n    hover: {\n      size: 7\n    }\n  },\n  yaxis: {\n    min: -10,\n    max: 40,\n    title: {\n      text: \"Engagement\"\n    }\n  },\n  grid: {\n    row: {\n      colors: [\"transparent\", \"transparent\"],\n      // takes an array which will be repeated on columns\n      opacity: 0.2\n    },\n    borderColor: \"#185a9d\"\n  },\n  responsive: [{\n    breakpoint: 600,\n    options: {\n      chart: {\n        toolbar: {\n          show: false\n        }\n      },\n      legend: {\n        show: false\n      }\n    }\n  }]\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-line-2\"), options);\nchart.render(); //\n// Area Chart\n//\n\nvar colors = [\"#6658dd\", \"#f7b84b\", \"#CED4DC\"];\nvar dataColors = $(\"#apex-area\").data(\"colors\");\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 380,\n    type: \"area\",\n    stacked: true,\n    events: {\n      selection: function selection(chart, e) {\n        console.log(new Date(e.xaxis.min));\n      }\n    }\n  },\n  colors: colors,\n  dataLabels: {\n    enabled: false\n  },\n  stroke: {\n    width: [2],\n    curve: \"smooth\"\n  },\n  series: [{\n    name: \"South\",\n    data: generateDayWiseTimeSeries(new Date(\"11 Feb 2017 GMT\").getTime(), 20, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: \"North\",\n    data: generateDayWiseTimeSeries(new Date(\"11 Feb 2017 GMT\").getTime(), 20, {\n      min: 10,\n      max: 20\n    })\n  }, {\n    name: \"Central\",\n    data: generateDayWiseTimeSeries(new Date(\"11 Feb 2017 GMT\").getTime(), 20, {\n      min: 10,\n      max: 15\n    })\n  }],\n  fill: {\n    type: \"gradient\",\n    gradient: {\n      opacityFrom: 0.6,\n      opacityTo: 0.8\n    }\n  },\n  legend: {\n    position: \"top\",\n    horizontalAlign: \"left\"\n  },\n  xaxis: {\n    type: \"datetime\"\n  }\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-area\"), options);\nchart.render();\n/*\n  // this function will generate output in this format\n  // data = [\n      [timestamp, 23],\n      [timestamp, 33],\n      [timestamp, 12]\n      ...\n  ]\n  */\n\nfunction generateDayWiseTimeSeries(baseval, count, yrange) {\n  var i = 0;\n  var series = [];\n\n  while (i < count) {\n    var x = baseval;\n    var y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\n    series.push([x, y]);\n    baseval += 86400000;\n    i++;\n  }\n\n  return series;\n} //\n// Column Chart - 1\n//\n\n\nvar colors = [\"#6658dd\", \"#1abc9c\", \"#CED4DC\"];\nvar dataColors = $(\"#apex-column-1\").data(\"colors\");\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 380,\n    type: \"bar\",\n    toolbar: {\n      show: false\n    }\n  },\n  plotOptions: {\n    bar: {\n      horizontal: false,\n      endingShape: \"rounded\",\n      columnWidth: \"55%\"\n    }\n  },\n  dataLabels: {\n    enabled: false\n  },\n  stroke: {\n    show: true,\n    width: 2,\n    colors: [\"transparent\"]\n  },\n  colors: colors,\n  series: [{\n    name: \"Net Profit\",\n    data: [44, 55, 57, 56, 61, 58, 63, 60, 66]\n  }, {\n    name: \"Revenue\",\n    data: [76, 85, 101, 98, 87, 105, 91, 114, 94]\n  }, {\n    name: \"Free Cash Flow\",\n    data: [35, 41, 36, 26, 45, 48, 52, 53, 41]\n  }],\n  xaxis: {\n    categories: [\"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\"]\n  },\n  legend: {\n    offsetY: 5\n  },\n  yaxis: {\n    title: {\n      text: \"$ (thousands)\"\n    }\n  },\n  fill: {\n    opacity: 1\n  },\n  grid: {\n    row: {\n      colors: [\"transparent\", \"transparent\"],\n      // takes an array which will be repeated on columns\n      opacity: 0.2\n    },\n    borderColor: \"#f1f3fa\",\n    padding: {\n      bottom: 10\n    }\n  },\n  tooltip: {\n    y: {\n      formatter: function formatter(val) {\n        return \"$ \" + val + \" thousands\";\n      }\n    }\n  }\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-column-1\"), options);\nchart.render(); //\n// Column Chart - 2\n//\n\nvar colors = [\"#6658dd\"];\nvar dataColors = $(\"#apex-column-2\").data(\"colors\");\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 380,\n    type: \"bar\",\n    toolbar: {\n      show: false\n    }\n  },\n  plotOptions: {\n    bar: {\n      dataLabels: {\n        position: \"top\" // top, center, bottom\n\n      }\n    }\n  },\n  dataLabels: {\n    enabled: true,\n    formatter: function formatter(val) {\n      return val + \"%\";\n    },\n    offsetY: -30,\n    style: {\n      fontSize: \"12px\",\n      colors: [\"#304758\"]\n    }\n  },\n  colors: colors,\n  series: [{\n    name: \"Inflation\",\n    data: [2.3, 3.1, 4.0, 10.1, 4.0, 3.6, 3.2, 2.3, 1.4, 0.8, 0.5, 0.2]\n  }],\n  xaxis: {\n    categories: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n    position: \"top\",\n    labels: {\n      offsetY: -18\n    },\n    axisBorder: {\n      show: false\n    },\n    axisTicks: {\n      show: false\n    },\n    crosshairs: {\n      fill: {\n        type: \"gradient\",\n        gradient: {\n          colorFrom: \"#D8E3F0\",\n          colorTo: \"#BED1E6\",\n          stops: [0, 100],\n          opacityFrom: 0.4,\n          opacityTo: 0.5\n        }\n      }\n    },\n    tooltip: {\n      enabled: true,\n      offsetY: -35\n    }\n  },\n  fill: {\n    gradient: {\n      enabled: false,\n      shade: \"light\",\n      type: \"horizontal\",\n      shadeIntensity: 0.25,\n      gradientToColors: undefined,\n      inverseColors: true,\n      opacityFrom: 1,\n      opacityTo: 1,\n      stops: [50, 0, 100, 100]\n    }\n  },\n  yaxis: {\n    axisBorder: {\n      show: false\n    },\n    axisTicks: {\n      show: false\n    },\n    labels: {\n      show: false,\n      formatter: function formatter(val) {\n        return val + \"%\";\n      }\n    }\n  },\n  title: {\n    text: \"Monthly Inflation in Argentina, 2002\",\n    floating: true,\n    offsetY: 350,\n    align: \"center\",\n    style: {\n      color: \"#444\"\n    }\n  },\n  grid: {\n    row: {\n      colors: [\"transparent\", \"transparent\"],\n      // takes an array which will be repeated on columns\n      opacity: 0.2\n    },\n    borderColor: \"#f1f3fa\"\n  }\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-column-2\"), options);\nchart.render(); //\n// Mixed Chart - 1\n//\n\nvar colors = [\"#CED4DC\", \"#6658dd\"];\nvar dataColors = $(\"#apex-mixed-1\").data(\"colors\");\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 380,\n    type: \"line\"\n  },\n  stroke: {\n    width: 2,\n    curve: \"smooth\"\n  },\n  series: [{\n    name: \"TEAM A\",\n    type: \"area\",\n    data: [44, 55, 31, 47, 31, 43, 26, 41, 31, 47, 33]\n  }, {\n    name: \"TEAM B\",\n    type: \"line\",\n    data: [55, 69, 45, 61, 43, 54, 37, 52, 44, 61, 43]\n  }],\n  colors: colors,\n  fill: {\n    type: \"solid\",\n    opacity: [0.35, 1]\n  },\n  labels: [\"Dec 01\", \"Dec 02\", \"Dec 03\", \"Dec 04\", \"Dec 05\", \"Dec 06\", \"Dec 07\", \"Dec 08\", \"Dec 09 \", \"Dec 10\", \"Dec 11\"],\n  markers: {\n    size: 0\n  },\n  yaxis: [{\n    title: {\n      text: \"Series A\"\n    }\n  }, {\n    opposite: true,\n    title: {\n      text: \"Series B\"\n    }\n  }],\n  tooltip: {\n    shared: true,\n    intersect: false,\n    y: {\n      formatter: function formatter(y) {\n        if (typeof y !== \"undefined\") {\n          return y.toFixed(0) + \" points\";\n        }\n\n        return y;\n      }\n    }\n  },\n  legend: {\n    offsetY: 7\n  }\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-mixed-1\"), options);\nchart.render(); //\n// Bar Chart - 1\n//\n\nvar colors = [\"#1abc9c\"];\nvar dataColors = $(\"#apex-bar-1\").data(\"colors\");\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 380,\n    type: \"bar\",\n    toolbar: {\n      show: false\n    }\n  },\n  plotOptions: {\n    bar: {\n      horizontal: true\n    }\n  },\n  dataLabels: {\n    enabled: false\n  },\n  series: [{\n    data: [400, 430, 448, 470, 540, 580, 690, 1100, 1200, 1380]\n  }],\n  colors: colors,\n  xaxis: {\n    categories: [\"South Korea\", \"Canada\", \"United Kingdom\", \"Netherlands\", \"Italy\", \"France\", \"Japan\", \"United States\", \"China\", \"Germany\"]\n  },\n  states: {\n    hover: {\n      filter: \"none\"\n    }\n  },\n  grid: {\n    borderColor: \"#f1f3fa\"\n  }\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-bar-1\"), options);\nchart.render(); //\n// Bar Chart - 2\n//\n\nvar colors = [\"#6658dd\", \"#1abc9c\"];\nvar dataColors = $(\"#apex-bar-2\").data(\"colors\");\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = _defineProperty({\n  chart: {\n    height: 380,\n    type: \"bar\",\n    stacked: true,\n    toolbar: {\n      show: false\n    }\n  },\n  colors: colors,\n  plotOptions: {\n    bar: {\n      horizontal: true,\n      barHeight: \"80%\"\n    }\n  },\n  dataLabels: {\n    enabled: false\n  },\n  stroke: {\n    width: 1,\n    colors: [\"#fff\"]\n  },\n  series: [{\n    name: \"Males\",\n    data: [0.4, 0.65, 0.76, 0.88, 1.5, 2.1, 2.9, 3.8, 3.9, 4.2, 4, 4.3, 4.1, 4.2, 4.5, 3.9, 3.5, 3]\n  }, {\n    name: \"Females\",\n    data: [-0.8, -1.05, -1.06, -1.18, -1.4, -2.2, -2.85, -3.7, -3.96, -4.22, -4.3, -4.4, -4.1, -4, -4.1, -3.4, -3.1, -2.8]\n  }],\n  grid: {\n    xaxis: {\n      showLines: false\n    }\n  },\n  yaxis: {\n    min: -5,\n    max: 5,\n    title: {// text: 'Age',\n    }\n  },\n  tooltip: {\n    shared: false,\n    x: {\n      formatter: function formatter(val) {\n        return val;\n      }\n    },\n    y: {\n      formatter: function formatter(val) {\n        return Math.abs(val) + \"%\";\n      }\n    }\n  },\n  xaxis: {\n    categories: [\"85+\", \"80-84\", \"75-79\", \"70-74\", \"65-69\", \"60-64\", \"55-59\", \"50-54\", \"45-49\", \"40-44\", \"35-39\", \"30-34\", \"25-29\", \"20-24\", \"15-19\", \"10-14\", \"5-9\", \"0-4\"],\n    title: {\n      text: \"Percent\"\n    },\n    labels: {\n      formatter: function formatter(val) {\n        return Math.abs(Math.round(val)) + \"%\";\n      }\n    }\n  },\n  legend: {\n    offsetY: 7\n  }\n}, \"grid\", {\n  borderColor: \"#f1f3fa\"\n});\n\nvar chart = new ApexCharts(document.querySelector(\"#apex-bar-2\"), options);\nchart.render(); //\n// Mixed Chart - 2\n//\n\nvar colors = [\"#6658dd\", \"#1abc9c\", \"#f672a7\"];\nvar dataColors = $(\"#apex-mixed-2\").data(\"colors\");\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 380,\n    type: \"line\",\n    padding: {\n      right: 0,\n      left: 0\n    },\n    stacked: false,\n    toolbar: {\n      show: false\n    }\n  },\n  stroke: {\n    width: [0, 2, 4],\n    curve: \"smooth\"\n  },\n  plotOptions: {\n    bar: {\n      columnWidth: \"50%\"\n    }\n  },\n  colors: colors,\n  series: [{\n    name: \"Team A\",\n    type: \"column\",\n    data: [23, 11, 22, 27, 13, 22, 37, 21, 44, 22, 30]\n  }, {\n    name: \"Team B\",\n    type: \"area\",\n    data: [44, 55, 41, 67, 22, 43, 21, 41, 56, 27, 43]\n  }, {\n    name: \"Team C\",\n    type: \"line\",\n    data: [30, 25, 36, 30, 45, 35, 64, 52, 59, 36, 39]\n  }],\n  fill: {\n    opacity: [0.85, 0.25, 1],\n    gradient: {\n      inverseColors: false,\n      shade: \"light\",\n      type: \"vertical\",\n      opacityFrom: 0.85,\n      opacityTo: 0.55,\n      stops: [0, 100, 100, 100]\n    }\n  },\n  labels: [\"01/01/2003\", \"02/01/2003\", \"03/01/2003\", \"04/01/2003\", \"05/01/2003\", \"06/01/2003\", \"07/01/2003\", \"08/01/2003\", \"09/01/2003\", \"10/01/2003\", \"11/01/2003\"],\n  markers: {\n    size: 0\n  },\n  legend: {\n    offsetY: 7\n  },\n  xaxis: {\n    type: \"datetime\"\n  },\n  yaxis: {\n    title: {\n      text: \"Points\"\n    }\n  },\n  tooltip: {\n    shared: true,\n    intersect: false,\n    y: {\n      formatter: function formatter(y) {\n        if (typeof y !== \"undefined\") {\n          return y.toFixed(0) + \" points\";\n        }\n\n        return y;\n      }\n    }\n  },\n  grid: {\n    borderColor: \"#f1f3fa\",\n    padding: {\n      bottom: 10\n    }\n  }\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-mixed-2\"), options);\nchart.render(); //\n// Mixed Chart - 3\n//\n\nvar colors = [\"#6658dd,#ebf2f6,#f672a7\"];\nvar dataColors = $(\"#apex-mixed-3\").data(\"colors\");\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 380,\n    type: \"line\",\n    stacked: false,\n    toolbar: {\n      show: false\n    }\n  },\n  dataLabels: {\n    enabled: false\n  },\n  stroke: {\n    width: [0, 0, 3]\n  },\n  series: [{\n    name: \"Income\",\n    type: \"column\",\n    data: [1.4, 2, 2.5, 1.5, 2.5, 2.8, 3.8, 4.6]\n  }, {\n    name: \"Cashflow\",\n    type: \"column\",\n    data: [1.1, 3, 3.1, 4, 4.1, 4.9, 6.5, 8.5]\n  }, {\n    name: \"Revenue\",\n    type: \"line\",\n    data: [20, 29, 37, 36, 44, 45, 50, 58]\n  }],\n  colors: colors,\n  xaxis: {\n    categories: [2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016]\n  },\n  yaxis: [{\n    axisTicks: {\n      show: true\n    },\n    axisBorder: {\n      show: true,\n      color: \"#675db7\"\n    },\n    labels: {\n      style: {\n        color: \"#675db7\"\n      }\n    },\n    title: {\n      text: \"Income (thousand crores)\"\n    }\n  }, {\n    axisTicks: {\n      show: true\n    },\n    axisBorder: {\n      show: true,\n      color: \"#23b397\"\n    },\n    labels: {\n      style: {\n        color: \"#23b397\"\n      },\n      offsetX: 10\n    },\n    title: {\n      text: \"Operating Cashflow (thousand crores)\"\n    }\n  }, {\n    opposite: true,\n    axisTicks: {\n      show: true\n    },\n    axisBorder: {\n      show: true,\n      color: \"#e36498\"\n    },\n    labels: {\n      style: {\n        color: \"#e36498\"\n      }\n    },\n    title: {\n      text: \"Revenue (thousand crores)\"\n    }\n  }],\n  tooltip: {\n    followCursor: true,\n    y: {\n      formatter: function formatter(y) {\n        if (typeof y !== \"undefined\") {\n          return y + \" thousand crores\";\n        }\n\n        return y;\n      }\n    }\n  },\n  grid: {\n    borderColor: \"#f1f3fa\",\n    padding: {\n      bottom: 10\n    }\n  },\n  legend: {\n    offsetY: 7\n  },\n  responsive: [{\n    breakpoint: 600,\n    options: {\n      yaxis: {\n        show: false\n      },\n      legend: {\n        show: false\n      }\n    }\n  }]\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-mixed-3\"), options);\nchart.render(); //\n// Bubble Chart - 1\n//\n\nfunction generateData(baseval, count, yrange) {\n  var i = 0;\n  var series = [];\n\n  while (i < count) {\n    var x = Math.floor(Math.random() * (750 - 1 + 1)) + 1;\n    var y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\n    var z = Math.floor(Math.random() * (75 - 15 + 1)) + 15;\n    series.push([x, y, z]);\n    baseval += 86400000;\n    i++;\n  }\n\n  return series;\n}\n\nvar colors = [\"#6658dd,#1abc9c,#f672a7\"];\nvar dataColors = $(\"#apex-bubble-1\").data(\"colors\");\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 380,\n    type: \"bubble\",\n    toolbar: {\n      show: false\n    }\n  },\n  dataLabels: {\n    enabled: false\n  },\n  series: [{\n    name: \"Bubble 1\",\n    data: generateData(new Date(\"11 Feb 2017 GMT\").getTime(), 20, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: \"Bubble 2\",\n    data: generateData(new Date(\"11 Feb 2017 GMT\").getTime(), 20, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: \"Bubble 3\",\n    data: generateData(new Date(\"11 Feb 2017 GMT\").getTime(), 20, {\n      min: 10,\n      max: 60\n    })\n  }],\n  fill: {\n    opacity: 0.8,\n    gradient: {\n      enabled: false\n    }\n  },\n  colors: colors,\n  xaxis: {\n    tickAmount: 12,\n    type: \"category\"\n  },\n  yaxis: {\n    max: 70\n  },\n  grid: {\n    borderColor: \"#f1f3fa\",\n    padding: {\n      bottom: 10\n    }\n  },\n  legend: {\n    offsetY: 7\n  }\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-bubble-1\"), options);\nchart.render(); //\n// Bubble Chart - 2\n//\n\n/*\n// this function will generate output in this format\n// data = [\n  [timestamp, 23],\n  [timestamp, 33],\n  [timestamp, 12]\n  ...\n]\n*/\n\nfunction generateData1(baseval1, count, yrange) {\n  var i = 0;\n  var series = [];\n\n  while (i < count) {\n    //var x =Math.floor(Math.random() * (750 - 1 + 1)) + 1;;\n    var y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\n    var z = Math.floor(Math.random() * (75 - 15 + 1)) + 15;\n    series.push([baseval1, y, z]);\n    baseval1 += 86400000;\n    i++;\n  }\n\n  return series;\n}\n\nvar colors = [\"#6658dd,#1abc9c,#f672a7,#6c757d\"];\nvar dataColors = $(\"#apex-bubble-2\").data(\"colors\");\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options2 = {\n  chart: {\n    height: 380,\n    type: \"bubble\",\n    toolbar: {\n      show: false\n    }\n  },\n  dataLabels: {\n    enabled: false\n  },\n  series: [{\n    name: \"Product 1\",\n    data: generateData1(new Date(\"11 Feb 2017 GMT\").getTime(), 20, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: \"Product 2\",\n    data: generateData1(new Date(\"11 Feb 2017 GMT\").getTime(), 20, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: \"Product 3\",\n    data: generateData1(new Date(\"11 Feb 2017 GMT\").getTime(), 20, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: \"Product 4\",\n    data: generateData1(new Date(\"11 Feb 2017 GMT\").getTime(), 20, {\n      min: 10,\n      max: 60\n    })\n  }],\n  fill: {\n    type: \"gradient\"\n  },\n  colors: colors,\n  xaxis: {\n    tickAmount: 12,\n    type: \"datetime\",\n    labels: {\n      rotate: 0\n    }\n  },\n  yaxis: {\n    max: 70\n  },\n  legend: {\n    offsetY: 7\n  },\n  grid: {\n    borderColor: \"#f1f3fa\",\n    padding: {\n      bottom: 10\n    }\n  }\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-bubble-2\"), options2);\nchart.render(); //\n// Scatter Chart - 1\n//\n\nvar colors = [\"#1abc9c\", \"#f672a7\", \"#6c757d\"];\nvar dataColors = $(\"#apex-scatter-1\").data(\"colors\");\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 380,\n    type: \"scatter\",\n    zoom: {\n      enabled: false\n    }\n  },\n  series: [{\n    name: \"Sample A\",\n    data: [[16.4, 5.4], [21.7, 2], [25.4, 3], [19, 2], [10.9, 1], [13.6, 3.2], [10.9, 7.4], [10.9, 0], [10.9, 8.2], [16.4, 0], [16.4, 1.8], [13.6, 0.3], [13.6, 0], [29.9, 0], [27.1, 2.3], [16.4, 0], [13.6, 3.7], [10.9, 5.2], [16.4, 6.5], [10.9, 0], [24.5, 7.1], [10.9, 0], [8.1, 4.7], [19, 0], [21.7, 1.8], [27.1, 0], [24.5, 0], [27.1, 0], [29.9, 1.5], [27.1, 0.8], [22.1, 2]]\n  }, {\n    name: \"Sample B\",\n    data: [[6.4, 13.4], [1.7, 11], [5.4, 8], [9, 17], [1.9, 4], [3.6, 12.2], [1.9, 14.4], [1.9, 9], [1.9, 13.2], [1.4, 7], [6.4, 8.8], [3.6, 4.3], [1.6, 10], [9.9, 2], [7.1, 15], [1.4, 0], [3.6, 13.7], [1.9, 15.2], [6.4, 16.5], [0.9, 10], [4.5, 17.1], [10.9, 10], [0.1, 14.7], [9, 10], [12.7, 11.8], [2.1, 10], [2.5, 10], [27.1, 10], [2.9, 11.5], [7.1, 10.8], [2.1, 12]]\n  }, {\n    name: \"Sample C\",\n    data: [[21.7, 3], [23.6, 3.5], [24.6, 3], [29.9, 3], [21.7, 20], [23, 2], [10.9, 3], [28, 4], [27.1, 0.3], [16.4, 4], [13.6, 0], [19, 5], [22.4, 3], [24.5, 3], [32.6, 3], [27.1, 4], [29.6, 6], [31.6, 8], [21.6, 5], [20.9, 4], [22.4, 0], [32.6, 10.3], [29.7, 20.8], [24.5, 0.8], [21.4, 0], [21.7, 6.9], [28.6, 7.7], [15.4, 0], [18.1, 0], [33.4, 0], [16.4, 0]]\n  }],\n  xaxis: {\n    tickAmount: 10\n  },\n  yaxis: {\n    tickAmount: 7\n  },\n  colors: colors,\n  grid: {\n    borderColor: \"#f1f3fa\",\n    padding: {\n      bottom: 10\n    }\n  },\n  legend: {\n    offsetY: 7\n  },\n  responsive: [{\n    breakpoint: 600,\n    options: {\n      chart: {\n        toolbar: {\n          show: false\n        }\n      },\n      legend: {\n        show: false\n      }\n    }\n  }]\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-scatter-1\"), options);\nchart.render(); //\n// Scatter Chart - 2\n//\n\nvar colors = [\"#1abc9c\", \"#f672a7\", \"#6c757d\", \"#6658dd\", \"#6559cc\"];\nvar dataColors = $(\"#apex-scatter-2\").data(\"colors\");\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 380,\n    type: \"scatter\",\n    zoom: {\n      type: \"xy\"\n    }\n  },\n  series: [{\n    name: \"Team 1\",\n    data: generateDayWiseTimeSeries(new Date(\"11 Feb 2017 GMT\").getTime(), 20, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: \"Team 2\",\n    data: generateDayWiseTimeSeries(new Date(\"11 Feb 2017 GMT\").getTime(), 20, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: \"Team 3\",\n    data: generateDayWiseTimeSeries(new Date(\"11 Feb 2017 GMT\").getTime(), 30, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: \"Team 4\",\n    data: generateDayWiseTimeSeries(new Date(\"11 Feb 2017 GMT\").getTime(), 10, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: \"Team 5\",\n    data: generateDayWiseTimeSeries(new Date(\"11 Feb 2017 GMT\").getTime(), 30, {\n      min: 10,\n      max: 60\n    })\n  }],\n  dataLabels: {\n    enabled: false\n  },\n  colors: colors,\n  grid: {\n    borderColor: \"#f1f3fa\",\n    xaxis: {\n      showLines: true\n    },\n    yaxis: {\n      showLines: true\n    },\n    padding: {\n      bottom: 10\n    }\n  },\n  legend: {\n    offsetY: 7\n  },\n  xaxis: {\n    type: \"datetime\"\n  },\n  yaxis: {\n    max: 70\n  },\n  responsive: [{\n    breakpoint: 600,\n    options: {\n      chart: {\n        toolbar: {\n          show: false\n        }\n      },\n      legend: {\n        show: false\n      }\n    }\n  }]\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-scatter-2\"), options);\nchart.render(); //\n// Candlestick Chart - 1\n//\n\nvar colors = [\"#6658dd\", \"#1abc9c\"];\nvar dataColors = $(\"#apex-candlestick-1\").data(\"colors\");\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 400,\n    type: \"candlestick\"\n  },\n  plotOptions: {\n    candlestick: {\n      colors: {\n        upward: colors[0],\n        downward: colors[1]\n      }\n    }\n  },\n  series: [{\n    data: seriesData\n  }],\n  stroke: {\n    show: true,\n    colors: \"#f1f3fa\",\n    width: [1, 4]\n  },\n  xaxis: {\n    type: \"datetime\"\n  },\n  grid: {\n    borderColor: \"#f1f3fa\"\n  }\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-candlestick-1\"), options);\nchart.render(); //\n// Candlestick Chart - 2\n//\n\nvar colors = [\"#6658dd\", \"#f7b84b\"];\nvar dataColors = $(\"#apex-candlestick-2\").data(\"colors\");\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar optionsCandlestick = {\n  chart: {\n    height: 240,\n    type: \"candlestick\",\n    toolbar: {\n      show: false\n    },\n    zoom: {\n      enabled: false\n    }\n  },\n  series: [{\n    data: seriesData\n  }],\n  plotOptions: {\n    candlestick: {\n      colors: {\n        upward: colors[0],\n        downward: colors[1]\n      }\n    }\n  },\n  xaxis: {\n    type: \"datetime\"\n  },\n  grid: {\n    borderColor: \"#f1f3fa\"\n  }\n};\nvar chartCandlestick = new ApexCharts(document.querySelector(\"#apex-candlestick-2\"), optionsCandlestick);\nchartCandlestick.render(); //\n// Candlestick Chart - 3\n//\n\nvar colors = [\"#f45454\", \"#37cde6\"];\nvar dataColors = $(\"#apex-candlestick-3\").data(\"colors\");\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 160,\n    type: \"bar\",\n    toolbar: {\n      show: false,\n      autoSelected: \"selection\"\n    },\n    selection: {\n      xaxis: {\n        min: new Date(\"20 Jan 2017\").getTime(),\n        max: new Date(\"10 Dec 2017\").getTime()\n      },\n      fill: {\n        color: \"#6c757d\",\n        opacity: 0.4\n      },\n      stroke: {\n        color: \"#6c757d\"\n      }\n    },\n    events: {\n      selection: function selection(chart, e) {\n        chartCandlestick.updateOptions({\n          xaxis: {\n            min: e.xaxis.min,\n            max: e.xaxis.max\n          }\n        }, false, false);\n      }\n    }\n  },\n  dataLabels: {\n    enabled: false\n  },\n  plotOptions: {\n    bar: {\n      columnWidth: \"80%\",\n      colors: {\n        ranges: [{\n          from: -1000,\n          to: 0,\n          color: colors[0]\n        }, {\n          from: 1,\n          to: 10000,\n          color: colors[1]\n        }]\n      }\n    }\n  },\n  series: [{\n    name: \"volume\",\n    data: seriesDataLinear\n  }],\n  xaxis: {\n    type: \"datetime\",\n    axisBorder: {\n      offsetX: 13\n    }\n  },\n  yaxis: {\n    labels: {\n      show: false\n    }\n  },\n  grid: {\n    borderColor: \"#f1f3fa\"\n  }\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-candlestick-3\"), options);\nchart.render(); //\n// Pie Chart -1\n//\n\nvar colors = [\"#6658dd\", \"#4fc6e1\", \"#4a81d4\", \"#00b19d\", \"#f1556c\"];\nvar dataColors = $(\"#apex-pie-1\").data(\"colors\");\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 320,\n    type: \"pie\"\n  },\n  series: [44, 55, 41, 17, 15],\n  labels: [\"Series 1\", \"Series 2\", \"Series 3\", \"Series 4\", \"Series 5\"],\n  colors: colors,\n  legend: {\n    show: true,\n    position: \"bottom\",\n    horizontalAlign: \"center\",\n    verticalAlign: \"middle\",\n    floating: false,\n    fontSize: \"14px\",\n    offsetX: 0,\n    offsetY: 7\n  },\n  responsive: [{\n    breakpoint: 600,\n    options: {\n      chart: {\n        height: 240\n      },\n      legend: {\n        show: false\n      }\n    }\n  }]\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-pie-1\"), options);\nchart.render(); //\n// Pie Chart - 2\n//\n\nvar colors = [\"#6658dd\", \"#4fc6e1\", \"#4a81d4\", \"#00b19d\", \"#f1556c\"];\nvar dataColors = $(\"#apex-pie-2\").data(\"colors\");\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 320,\n    type: \"donut\"\n  },\n  series: [44, 55, 41, 17, 15],\n  legend: {\n    show: true,\n    position: \"bottom\",\n    horizontalAlign: \"center\",\n    verticalAlign: \"middle\",\n    floating: false,\n    fontSize: \"14px\",\n    offsetX: 0,\n    offsetY: 7\n  },\n  labels: [\"Series 1\", \"Series 2\", \"Series 3\", \"Series 4\", \"Series 5\"],\n  colors: colors,\n  responsive: [{\n    breakpoint: 600,\n    options: {\n      chart: {\n        height: 240\n      },\n      legend: {\n        show: false\n      }\n    }\n  }],\n  fill: {\n    type: \"gradient\"\n  }\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-pie-2\"), options);\nchart.render(); //\n// Pie Chart - 3\n//\n\nvar colors = [\"#6658dd\", \"#4fc6e1\", \"#4a81d4\", \"#00b19d\", \"#f1556c\"];\nvar dataColors = $(\"#apex-pie-3\").data(\"colors\");\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 320,\n    type: \"donut\",\n    dropShadow: {\n      enabled: true,\n      color: \"#111\",\n      top: -1,\n      left: 3,\n      blur: 3,\n      opacity: 0.2\n    }\n  },\n  stroke: {\n    show: true,\n    width: 2\n  },\n  series: [44, 55, 41, 17, 15],\n  colors: colors,\n  labels: [\"Comedy\", \"Action\", \"SciFi\", \"Drama\", \"Horror\"],\n  dataLabels: {\n    dropShadow: {\n      blur: 3,\n      opacity: 0.8\n    }\n  },\n  fill: {\n    type: \"pattern\",\n    opacity: 1,\n    pattern: {\n      enabled: true,\n      style: [\"verticalLines\", \"squares\", \"horizontalLines\", \"circles\", \"slantedLines\"]\n    }\n  },\n  states: {\n    hover: {\n      enabled: false\n    }\n  },\n  legend: {\n    show: true,\n    position: \"bottom\",\n    horizontalAlign: \"center\",\n    verticalAlign: \"middle\",\n    floating: false,\n    fontSize: \"14px\",\n    offsetX: 0,\n    offsetY: 7\n  },\n  responsive: [{\n    breakpoint: 600,\n    options: {\n      chart: {\n        height: 240\n      },\n      legend: {\n        show: false\n      }\n    }\n  }]\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-pie-3\"), options);\nchart.render(); //\n// Radialbar Chart -1\n//\n\nvar colors = [\"#6c757d\"];\nvar dataColors = $(\"#apex-radialbar-1\").data(\"colors\");\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 350,\n    type: \"radialBar\"\n  },\n  plotOptions: {\n    radialBar: {\n      hollow: {\n        size: \"70%\"\n      }\n    }\n  },\n  colors: [\"#6c757d\"],\n  series: [70],\n  labels: [\"CRICKET\"]\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-radialbar-1\"), options);\nchart.render(); //\n// Radialbar Chart - 2\n//\n\nvar colors = [\"#6658dd\", \"#e36498\", \"#23b397\", \"#f7b84b\"];\nvar dataColors = $(\"#apex-radialbar-2\").data(\"colors\");\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 350,\n    type: \"radialBar\"\n  },\n  plotOptions: {\n    radialBar: {\n      dataLabels: {\n        name: {\n          fontSize: \"22px\"\n        },\n        value: {\n          fontSize: \"16px\"\n        },\n        total: {\n          show: true,\n          label: \"Total\",\n          formatter: function formatter(w) {\n            // By default this function returns the average of all series. The below is just an example to show the use of custom formatter function\n            return 249;\n          }\n        }\n      }\n    }\n  },\n  colors: colors,\n  series: [44, 55, 67, 83],\n  labels: [\"Apples\", \"Oranges\", \"Bananas\", \"Berries\"]\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-radialbar-2\"), options);\nchart.render(); //\n// Radialbar Chart - 3\n//\n\nvar colors = [\"#f1556c\"];\nvar dataColors = $(\"#apex-radialbar-3\").data(\"colors\");\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 375,\n    type: \"radialBar\"\n  },\n  plotOptions: {\n    radialBar: {\n      startAngle: -135,\n      endAngle: 135,\n      dataLabels: {\n        name: {\n          fontSize: \"16px\",\n          color: undefined,\n          offsetY: 120\n        },\n        value: {\n          offsetY: 76,\n          fontSize: \"22px\",\n          color: undefined,\n          formatter: function formatter(val) {\n            return val + \"%\";\n          }\n        }\n      }\n    }\n  },\n  fill: {\n    gradient: {\n      enabled: true,\n      shade: \"dark\",\n      shadeIntensity: 0.15,\n      inverseColors: false,\n      opacityFrom: 1,\n      opacityTo: 1,\n      stops: [0, 50, 65, 91]\n    }\n  },\n  stroke: {\n    dashArray: 4\n  },\n  colors: colors,\n  series: [67],\n  labels: [\"Median Ratio\"],\n  responsive: [{\n    breakpoint: 380,\n    options: {\n      chart: {\n        height: 280\n      }\n    }\n  }]\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-radialbar-3\"), options);\nchart.render();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91Ym9sZC1sYXJhdmVsLy4vcmVzb3VyY2VzL2pzL3BhZ2VzL2FwZXhjaGFydHMuaW5pdC5qcz85OWZiIl0sIm5hbWVzIjpbIkFwZXgiLCJncmlkIiwicGFkZGluZyIsInJpZ2h0IiwibGVmdCIsImRhdGFMYWJlbHMiLCJlbmFibGVkIiwicmFuZG9taXplQXJyYXkiLCJhcmciLCJhcnJheSIsInNsaWNlIiwiY3VycmVudEluZGV4IiwibGVuZ3RoIiwidGVtcG9yYXJ5VmFsdWUiLCJyYW5kb21JbmRleCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInNwYXJrbGluZURhdGEiLCJjb2xvclBhbGV0dGUiLCJjb2xvcnMiLCJkYXRhQ29sb3JzIiwiJCIsImRhdGEiLCJzcGxpdCIsInNwYXJrMSIsImNoYXJ0IiwidHlwZSIsImhlaWdodCIsInNwYXJrbGluZSIsInN0cm9rZSIsIndpZHRoIiwiY3VydmUiLCJmaWxsIiwib3BhY2l0eSIsInNlcmllcyIsIm5hbWUiLCJ5YXhpcyIsIm1pbiIsInRpdGxlIiwidGV4dCIsIm9mZnNldFgiLCJzdHlsZSIsImZvbnRTaXplIiwic3VidGl0bGUiLCJvZmZzZXRZIiwiQXBleENoYXJ0cyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInJlbmRlciIsInNwYXJrMiIsInNwYXJrMyIsInhheGlzIiwiY3Jvc3NoYWlycyIsIm9wdGlvbnMiLCJ6b29tIiwidG9vbGJhciIsInNob3ciLCJhbGlnbiIsImNvbG9yIiwicm93IiwiYm9yZGVyQ29sb3IiLCJtYXJrZXJzIiwic2l6ZSIsImNhdGVnb3JpZXMiLCJtYXgiLCJsZWdlbmQiLCJwb3NpdGlvbiIsImhvcml6b250YWxBbGlnbiIsImZsb2F0aW5nIiwicmVzcG9uc2l2ZSIsImJyZWFrcG9pbnQiLCJzaGFkb3ciLCJ0b3AiLCJibHVyIiwiZ3JhZGllbnQiLCJzaGFkZSIsImdyYWRpZW50VG9Db2xvcnMiLCJzaGFkZUludGVuc2l0eSIsIm9wYWNpdHlGcm9tIiwib3BhY2l0eVRvIiwic3RvcHMiLCJzdHJva2VDb2xvciIsInN0cm9rZVdpZHRoIiwiaG92ZXIiLCJzdGFja2VkIiwiZXZlbnRzIiwic2VsZWN0aW9uIiwiZSIsImNvbnNvbGUiLCJsb2ciLCJEYXRlIiwiZ2VuZXJhdGVEYXlXaXNlVGltZVNlcmllcyIsImdldFRpbWUiLCJiYXNldmFsIiwiY291bnQiLCJ5cmFuZ2UiLCJpIiwieCIsInkiLCJwdXNoIiwicGxvdE9wdGlvbnMiLCJiYXIiLCJob3Jpem9udGFsIiwiZW5kaW5nU2hhcGUiLCJjb2x1bW5XaWR0aCIsImJvdHRvbSIsInRvb2x0aXAiLCJmb3JtYXR0ZXIiLCJ2YWwiLCJsYWJlbHMiLCJheGlzQm9yZGVyIiwiYXhpc1RpY2tzIiwiY29sb3JGcm9tIiwiY29sb3JUbyIsInVuZGVmaW5lZCIsImludmVyc2VDb2xvcnMiLCJvcHBvc2l0ZSIsInNoYXJlZCIsImludGVyc2VjdCIsInRvRml4ZWQiLCJzdGF0ZXMiLCJmaWx0ZXIiLCJiYXJIZWlnaHQiLCJzaG93TGluZXMiLCJhYnMiLCJyb3VuZCIsImZvbGxvd0N1cnNvciIsImdlbmVyYXRlRGF0YSIsInoiLCJ0aWNrQW1vdW50IiwiZ2VuZXJhdGVEYXRhMSIsImJhc2V2YWwxIiwib3B0aW9uczIiLCJyb3RhdGUiLCJjYW5kbGVzdGljayIsInVwd2FyZCIsImRvd253YXJkIiwic2VyaWVzRGF0YSIsIm9wdGlvbnNDYW5kbGVzdGljayIsImNoYXJ0Q2FuZGxlc3RpY2siLCJhdXRvU2VsZWN0ZWQiLCJ1cGRhdGVPcHRpb25zIiwicmFuZ2VzIiwiZnJvbSIsInRvIiwic2VyaWVzRGF0YUxpbmVhciIsInZlcnRpY2FsQWxpZ24iLCJkcm9wU2hhZG93IiwicGF0dGVybiIsInJhZGlhbEJhciIsImhvbGxvdyIsInZhbHVlIiwidG90YWwiLCJsYWJlbCIsInciLCJzdGFydEFuZ2xlIiwiZW5kQW5nbGUiLCJkYXNoQXJyYXkiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QUFBLE1BQU0sRUFBRSxDQUFDLEVBQUQsQ0F6Q0U7QUEwQ1YyRSxFQUFBQSxNQUFNLEVBQUUsQ0FBQyxjQUFELENBMUNFO0FBMkNWeEMsRUFBQUEsVUFBVSxFQUFFLENBQ1I7QUFDSUMsSUFBQUEsVUFBVSxFQUFFLEdBRGhCO0FBRUlqQixJQUFBQSxPQUFPLEVBQUU7QUFDTDVCLE1BQUFBLEtBQUssRUFBRTtBQUNIRSxRQUFBQSxNQUFNLEVBQUU7QUFETDtBQURGO0FBRmIsR0FEUTtBQTNDRixDQUFkO0FBdURBLElBQUlGLEtBQUssR0FBRyxJQUFJb0IsVUFBSixDQUNSQyxRQUFRLENBQUNDLGFBQVQsQ0FBdUIsbUJBQXZCLENBRFEsRUFFUk0sT0FGUSxDQUFaO0FBS0E1QixLQUFLLENBQUN1QixNQUFOIiwic291cmNlc0NvbnRlbnQiOlsiLypcblRlbXBsYXRlIE5hbWU6IFVCb2xkIC0gUmVzcG9uc2l2ZSBCb290c3RyYXAgNCBBZG1pbiBEYXNoYm9hcmRcbkF1dGhvcjogQ29kZXJUaGVtZXNcbldlYnNpdGU6IGh0dHBzOi8vY29kZXJ0aGVtZXMuY29tL1xuQ29udGFjdDogc3VwcG9ydEBjb2RlcnRoZW1lcy5jb21cbkZpbGU6IEFwZXggQ2hhcnRzXG4qL1xuXG5BcGV4LmdyaWQgPSB7XG4gICAgcGFkZGluZzoge1xuICAgICAgICByaWdodDogMCxcbiAgICAgICAgbGVmdDogMCxcbiAgICB9LFxufTtcblxuQXBleC5kYXRhTGFiZWxzID0ge1xuICAgIGVuYWJsZWQ6IGZhbHNlLFxufTtcblxudmFyIHJhbmRvbWl6ZUFycmF5ID0gZnVuY3Rpb24gKGFyZykge1xuICAgIHZhciBhcnJheSA9IGFyZy5zbGljZSgpO1xuICAgIHZhciBjdXJyZW50SW5kZXggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIHRlbXBvcmFyeVZhbHVlLFxuICAgICAgICByYW5kb21JbmRleDtcblxuICAgIHdoaWxlICgwICE9PSBjdXJyZW50SW5kZXgpIHtcbiAgICAgICAgcmFuZG9tSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjdXJyZW50SW5kZXgpO1xuICAgICAgICBjdXJyZW50SW5kZXggLT0gMTtcblxuICAgICAgICB0ZW1wb3JhcnlWYWx1ZSA9IGFycmF5W2N1cnJlbnRJbmRleF07XG4gICAgICAgIGFycmF5W2N1cnJlbnRJbmRleF0gPSBhcnJheVtyYW5kb21JbmRleF07XG4gICAgICAgIGFycmF5W3JhbmRvbUluZGV4XSA9IHRlbXBvcmFyeVZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBhcnJheTtcbn07XG5cbi8vIGRhdGEgZm9yIHRoZSBzcGFya2xpbmVzIHRoYXQgYXBwZWFyIGJlbG93IGhlYWRlciBhcmVhXG52YXIgc3BhcmtsaW5lRGF0YSA9IFtcbiAgICA0NywgNDUsIDU0LCAzOCwgNTYsIDI0LCA2NSwgMzEsIDM3LCAzOSwgNjIsIDUxLCAzNSwgNDEsIDM1LCAyNywgOTMsIDUzLCA2MSxcbiAgICAyNywgNTQsIDQzLCAxOSwgNDYsXG5dO1xuXG4vLyB0aGUgZGVmYXVsdCBjb2xvclBhbGV0dGUgZm9yIHRoaXMgZGFzaGJvYXJkXG4vL3ZhciBjb2xvclBhbGV0dGUgPSBbJyMwMUJGRDYnLCAnIzU1NjRCRScsICcjRjdBNjAwJywgJyNFRENEMjQnLCAnI0Y3NEY1OCddO1xudmFyIGNvbG9yUGFsZXR0ZSA9IFtcIiMwMEQ4QjZcIiwgXCIjMDA4RkZCXCIsIFwiI0ZFQjAxOVwiLCBcIiNGRjQ1NjBcIiwgXCIjNzc1REQwXCJdO1xuXG52YXIgY29sb3JzID0gW1wiIzY2NThkZFwiXTtcbnZhciBkYXRhQ29sb3JzID0gJChcIiNzcGFyazFcIikuZGF0YShcImNvbG9yc1wiKTtcbmlmIChkYXRhQ29sb3JzKSB7XG4gICAgY29sb3JzID0gZGF0YUNvbG9ycy5zcGxpdChcIixcIik7XG59XG52YXIgc3BhcmsxID0ge1xuICAgIGNoYXJ0OiB7XG4gICAgICAgIHR5cGU6IFwiYXJlYVwiLFxuICAgICAgICBoZWlnaHQ6IDE2MCxcbiAgICAgICAgc3BhcmtsaW5lOiB7XG4gICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgc3Ryb2tlOiB7XG4gICAgICAgIHdpZHRoOiAyLFxuICAgICAgICBjdXJ2ZTogXCJzdHJhaWdodFwiLFxuICAgIH0sXG4gICAgZmlsbDoge1xuICAgICAgICBvcGFjaXR5OiAwLjIsXG4gICAgfSxcbiAgICBzZXJpZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJVQm9sZCBTYWxlcyBcIixcbiAgICAgICAgICAgIGRhdGE6IHJhbmRvbWl6ZUFycmF5KHNwYXJrbGluZURhdGEpLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgeWF4aXM6IHtcbiAgICAgICAgbWluOiAwLFxuICAgIH0sXG4gICAgY29sb3JzOiBjb2xvcnMsXG4gICAgdGl0bGU6IHtcbiAgICAgICAgdGV4dDogXCIkNDI0LDY1MlwiLFxuICAgICAgICBvZmZzZXRYOiAxMCxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgIGZvbnRTaXplOiBcIjIycHhcIixcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHN1YnRpdGxlOiB7XG4gICAgICAgIHRleHQ6IFwiVG90YWwgU2FsZXNcIixcbiAgICAgICAgb2Zmc2V0WDogMTAsXG4gICAgICAgIG9mZnNldFk6IDM1LFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgZm9udFNpemU6IFwiMTNweFwiLFxuICAgICAgICB9LFxuICAgIH0sXG59O1xubmV3IEFwZXhDaGFydHMoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzcGFyazFcIiksIHNwYXJrMSkucmVuZGVyKCk7XG5cbnZhciBjb2xvcnMgPSBbXCIjRENFNkVDXCJdO1xudmFyIGRhdGFDb2xvcnMgPSAkKFwiI3NwYXJrMlwiKS5kYXRhKFwiY29sb3JzXCIpO1xuaWYgKGRhdGFDb2xvcnMpIHtcbiAgICBjb2xvcnMgPSBkYXRhQ29sb3JzLnNwbGl0KFwiLFwiKTtcbn1cbnZhciBzcGFyazIgPSB7XG4gICAgY2hhcnQ6IHtcbiAgICAgICAgdHlwZTogXCJhcmVhXCIsXG4gICAgICAgIGhlaWdodDogMTYwLFxuICAgICAgICBzcGFya2xpbmU6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBzdHJva2U6IHtcbiAgICAgICAgd2lkdGg6IDIsXG4gICAgICAgIGN1cnZlOiBcInN0cmFpZ2h0XCIsXG4gICAgfSxcbiAgICBmaWxsOiB7XG4gICAgICAgIG9wYWNpdHk6IDAuMixcbiAgICB9LFxuICAgIHNlcmllczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcIlVCb2xkIEV4cGVuc2VzIFwiLFxuICAgICAgICAgICAgZGF0YTogcmFuZG9taXplQXJyYXkoc3BhcmtsaW5lRGF0YSksXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICB5YXhpczoge1xuICAgICAgICBtaW46IDAsXG4gICAgfSxcbiAgICBjb2xvcnM6IGNvbG9ycyxcbiAgICB0aXRsZToge1xuICAgICAgICB0ZXh0OiBcIiQyMzUsMzEyXCIsXG4gICAgICAgIG9mZnNldFg6IDEwLFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgZm9udFNpemU6IFwiMjJweFwiLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgc3VidGl0bGU6IHtcbiAgICAgICAgdGV4dDogXCJFeHBlbnNlc1wiLFxuICAgICAgICBvZmZzZXRYOiAxMCxcbiAgICAgICAgb2Zmc2V0WTogMzUsXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICBmb250U2l6ZTogXCIxM3B4XCIsXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5cbm5ldyBBcGV4Q2hhcnRzKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3BhcmsyXCIpLCBzcGFyazIpLnJlbmRlcigpO1xuXG4vLyBTcGFya2xpbmUgMlxudmFyIGNvbG9ycyA9IFtcIiNmNjcyYTdcIl07XG52YXIgZGF0YUNvbG9ycyA9ICQoXCIjc3BhcmszXCIpLmRhdGEoXCJjb2xvcnNcIik7XG5pZiAoZGF0YUNvbG9ycykge1xuICAgIGNvbG9ycyA9IGRhdGFDb2xvcnMuc3BsaXQoXCIsXCIpO1xufVxudmFyIHNwYXJrMyA9IHtcbiAgICBjaGFydDoge1xuICAgICAgICB0eXBlOiBcImFyZWFcIixcbiAgICAgICAgaGVpZ2h0OiAxNjAsXG4gICAgICAgIHNwYXJrbGluZToge1xuICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHN0cm9rZToge1xuICAgICAgICB3aWR0aDogMixcbiAgICAgICAgY3VydmU6IFwic3RyYWlnaHRcIixcbiAgICB9LFxuICAgIGZpbGw6IHtcbiAgICAgICAgb3BhY2l0eTogMC4yLFxuICAgIH0sXG4gICAgc2VyaWVzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IFwiTmV0IFByb2ZpdHMgXCIsXG4gICAgICAgICAgICBkYXRhOiByYW5kb21pemVBcnJheShzcGFya2xpbmVEYXRhKSxcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHhheGlzOiB7XG4gICAgICAgIGNyb3NzaGFpcnM6IHtcbiAgICAgICAgICAgIHdpZHRoOiAxLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgeWF4aXM6IHtcbiAgICAgICAgbWluOiAwLFxuICAgIH0sXG4gICAgY29sb3JzOiBjb2xvcnMsXG4gICAgdGl0bGU6IHtcbiAgICAgICAgdGV4dDogXCIkMTM1LDk2NVwiLFxuICAgICAgICBvZmZzZXRYOiAxMCxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgIGZvbnRTaXplOiBcIjIycHhcIixcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHN1YnRpdGxlOiB7XG4gICAgICAgIHRleHQ6IFwiUHJvZml0c1wiLFxuICAgICAgICBvZmZzZXRYOiAxMCxcbiAgICAgICAgb2Zmc2V0WTogMzUsXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICBmb250U2l6ZTogXCIxM3B4XCIsXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5cbm5ldyBBcGV4Q2hhcnRzKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3BhcmszXCIpLCBzcGFyazMpLnJlbmRlcigpO1xuXG4vL1xuLy8gTGluZSB3aXRoIERhdGEgTGFiZWxzXG4vL1xudmFyIGNvbG9ycyA9IFtcIiM2NjU4ZGRcIiwgXCIjMWFiYzljXCJdO1xudmFyIGRhdGFDb2xvcnMgPSAkKFwiI2FwZXgtbGluZS0xXCIpLmRhdGEoXCJjb2xvcnNcIik7XG5pZiAoZGF0YUNvbG9ycykge1xuICAgIGNvbG9ycyA9IGRhdGFDb2xvcnMuc3BsaXQoXCIsXCIpO1xufVxudmFyIG9wdGlvbnMgPSB7XG4gICAgY2hhcnQ6IHtcbiAgICAgICAgaGVpZ2h0OiAzODAsXG4gICAgICAgIHR5cGU6IFwibGluZVwiLFxuICAgICAgICB6b29tOiB7XG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgICAgdG9vbGJhcjoge1xuICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBjb2xvcnM6IGNvbG9ycyxcbiAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgfSxcbiAgICBzdHJva2U6IHtcbiAgICAgICAgd2lkdGg6IFszLCAzXSxcbiAgICAgICAgY3VydmU6IFwic21vb3RoXCIsXG4gICAgfSxcbiAgICBzZXJpZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJIaWdoIC0gMjAxOFwiLFxuICAgICAgICAgICAgZGF0YTogWzI4LCAyOSwgMzMsIDM2LCAzMiwgMzIsIDMzXSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJMb3cgLSAyMDE4XCIsXG4gICAgICAgICAgICBkYXRhOiBbMTIsIDExLCAxNCwgMTgsIDE3LCAxMywgMTNdLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgdGl0bGU6IHtcbiAgICAgICAgdGV4dDogXCJBdmVyYWdlIEhpZ2ggJiBMb3cgVGVtcGVyYXR1cmVcIixcbiAgICAgICAgYWxpZ246IFwibGVmdFwiLFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgZm9udFNpemU6IFwiMTRweFwiLFxuICAgICAgICAgICAgY29sb3I6IFwiIzY2NlwiLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgZ3JpZDoge1xuICAgICAgICByb3c6IHtcbiAgICAgICAgICAgIGNvbG9yczogW1widHJhbnNwYXJlbnRcIiwgXCJ0cmFuc3BhcmVudFwiXSwgLy8gdGFrZXMgYW4gYXJyYXkgd2hpY2ggd2lsbCBiZSByZXBlYXRlZCBvbiBjb2x1bW5zXG4gICAgICAgICAgICBvcGFjaXR5OiAwLjIsXG4gICAgICAgIH0sXG4gICAgICAgIGJvcmRlckNvbG9yOiBcIiNmMWYzZmFcIixcbiAgICB9LFxuICAgIG1hcmtlcnM6IHtcbiAgICAgICAgc3R5bGU6IFwiaW52ZXJ0ZWRcIixcbiAgICAgICAgc2l6ZTogNixcbiAgICB9LFxuICAgIHhheGlzOiB7XG4gICAgICAgIGNhdGVnb3JpZXM6IFtcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLCBcIkp1bFwiXSxcbiAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICAgIHRleHQ6IFwiTW9udGhcIixcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHlheGlzOiB7XG4gICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgICB0ZXh0OiBcIlRlbXBlcmF0dXJlXCIsXG4gICAgICAgIH0sXG4gICAgICAgIG1pbjogNSxcbiAgICAgICAgbWF4OiA0MCxcbiAgICB9LFxuICAgIGxlZ2VuZDoge1xuICAgICAgICBwb3NpdGlvbjogXCJ0b3BcIixcbiAgICAgICAgaG9yaXpvbnRhbEFsaWduOiBcInJpZ2h0XCIsXG4gICAgICAgIGZsb2F0aW5nOiB0cnVlLFxuICAgICAgICBvZmZzZXRZOiAtMjUsXG4gICAgICAgIG9mZnNldFg6IC01LFxuICAgIH0sXG4gICAgcmVzcG9uc2l2ZTogW1xuICAgICAgICB7XG4gICAgICAgICAgICBicmVha3BvaW50OiA2MDAsXG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgdG9vbGJhcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgXSxcbn07XG5cbnZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYXBleC1saW5lLTFcIiksIG9wdGlvbnMpO1xuXG5jaGFydC5yZW5kZXIoKTtcblxuLy9cbi8vIEdyYWRpZW50IExpbmUgQ2hhcnRcbi8vXG52YXIgY29sb3JzID0gW1wiI2Y2NzJhN1wiXTtcbnZhciBkYXRhQ29sb3JzID0gJChcIiNhcGV4LWxpbmUtMlwiKS5kYXRhKFwiY29sb3JzXCIpO1xuaWYgKGRhdGFDb2xvcnMpIHtcbiAgICBjb2xvcnMgPSBkYXRhQ29sb3JzLnNwbGl0KFwiLFwiKTtcbn1cbnZhciBvcHRpb25zID0ge1xuICAgIGNoYXJ0OiB7XG4gICAgICAgIGhlaWdodDogMzgwLFxuICAgICAgICB0eXBlOiBcImxpbmVcIixcbiAgICAgICAgc2hhZG93OiB7XG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbG9yOiBcIiNiYmJcIixcbiAgICAgICAgICAgIHRvcDogMyxcbiAgICAgICAgICAgIGxlZnQ6IDIsXG4gICAgICAgICAgICBibHVyOiAzLFxuICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHN0cm9rZToge1xuICAgICAgICB3aWR0aDogNSxcbiAgICAgICAgY3VydmU6IFwic21vb3RoXCIsXG4gICAgfSxcbiAgICBzZXJpZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJMaWtlc1wiLFxuICAgICAgICAgICAgZGF0YTogW1xuICAgICAgICAgICAgICAgIDQsIDMsIDEwLCA5LCAyOSwgMTksIDIyLCA5LCAxMiwgNywgMTksIDUsIDEzLCA5LCAxNywgMiwgNywgNSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICB4YXhpczoge1xuICAgICAgICB0eXBlOiBcImRhdGV0aW1lXCIsXG4gICAgICAgIGNhdGVnb3JpZXM6IFtcbiAgICAgICAgICAgIFwiMS8xMS8yMDAwXCIsXG4gICAgICAgICAgICBcIjIvMTEvMjAwMFwiLFxuICAgICAgICAgICAgXCIzLzExLzIwMDBcIixcbiAgICAgICAgICAgIFwiNC8xMS8yMDAwXCIsXG4gICAgICAgICAgICBcIjUvMTEvMjAwMFwiLFxuICAgICAgICAgICAgXCI2LzExLzIwMDBcIixcbiAgICAgICAgICAgIFwiNy8xMS8yMDAwXCIsXG4gICAgICAgICAgICBcIjgvMTEvMjAwMFwiLFxuICAgICAgICAgICAgXCI5LzExLzIwMDBcIixcbiAgICAgICAgICAgIFwiMTAvMTEvMjAwMFwiLFxuICAgICAgICAgICAgXCIxMS8xMS8yMDAwXCIsXG4gICAgICAgICAgICBcIjEyLzExLzIwMDBcIixcbiAgICAgICAgICAgIFwiMS8xMS8yMDAxXCIsXG4gICAgICAgICAgICBcIjIvMTEvMjAwMVwiLFxuICAgICAgICAgICAgXCIzLzExLzIwMDFcIixcbiAgICAgICAgICAgIFwiNC8xMS8yMDAxXCIsXG4gICAgICAgICAgICBcIjUvMTEvMjAwMVwiLFxuICAgICAgICAgICAgXCI2LzExLzIwMDFcIixcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHRpdGxlOiB7XG4gICAgICAgIHRleHQ6IFwiU29jaWFsIE1lZGlhXCIsXG4gICAgICAgIGFsaWduOiBcImxlZnRcIixcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgIGZvbnRTaXplOiBcIjE0cHhcIixcbiAgICAgICAgICAgIGNvbG9yOiBcIiM2NjZcIixcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIGZpbGw6IHtcbiAgICAgICAgdHlwZTogXCJncmFkaWVudFwiLFxuICAgICAgICBncmFkaWVudDoge1xuICAgICAgICAgICAgc2hhZGU6IFwiZGFya1wiLFxuICAgICAgICAgICAgZ3JhZGllbnRUb0NvbG9yczogY29sb3JzLFxuICAgICAgICAgICAgc2hhZGVJbnRlbnNpdHk6IDEsXG4gICAgICAgICAgICB0eXBlOiBcImhvcml6b250YWxcIixcbiAgICAgICAgICAgIG9wYWNpdHlGcm9tOiAxLFxuICAgICAgICAgICAgb3BhY2l0eVRvOiAxLFxuICAgICAgICAgICAgc3RvcHM6IFswLCAxMDAsIDEwMCwgMTAwXSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG1hcmtlcnM6IHtcbiAgICAgICAgc2l6ZTogNCxcbiAgICAgICAgb3BhY2l0eTogMC45LFxuICAgICAgICBjb2xvcnM6IFtcIiM1NmMyZDZcIl0sXG4gICAgICAgIHN0cm9rZUNvbG9yOiBcIiNmZmZcIixcbiAgICAgICAgc3Ryb2tlV2lkdGg6IDIsXG4gICAgICAgIHN0eWxlOiBcImludmVydGVkXCIsIC8vIGZ1bGwsIGhvbGxvdywgaW52ZXJ0ZWRcbiAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgICAgIHNpemU6IDcsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICB5YXhpczoge1xuICAgICAgICBtaW46IC0xMCxcbiAgICAgICAgbWF4OiA0MCxcbiAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICAgIHRleHQ6IFwiRW5nYWdlbWVudFwiLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgZ3JpZDoge1xuICAgICAgICByb3c6IHtcbiAgICAgICAgICAgIGNvbG9yczogW1widHJhbnNwYXJlbnRcIiwgXCJ0cmFuc3BhcmVudFwiXSwgLy8gdGFrZXMgYW4gYXJyYXkgd2hpY2ggd2lsbCBiZSByZXBlYXRlZCBvbiBjb2x1bW5zXG4gICAgICAgICAgICBvcGFjaXR5OiAwLjIsXG4gICAgICAgIH0sXG4gICAgICAgIGJvcmRlckNvbG9yOiBcIiMxODVhOWRcIixcbiAgICB9LFxuICAgIHJlc3BvbnNpdmU6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgYnJlYWtwb2ludDogNjAwLFxuICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICAgICAgICAgIHRvb2xiYXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIF0sXG59O1xuXG52YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2FwZXgtbGluZS0yXCIpLCBvcHRpb25zKTtcblxuY2hhcnQucmVuZGVyKCk7XG5cbi8vXG4vLyBBcmVhIENoYXJ0XG4vL1xudmFyIGNvbG9ycyA9IFtcIiM2NjU4ZGRcIiwgXCIjZjdiODRiXCIsIFwiI0NFRDREQ1wiXTtcbnZhciBkYXRhQ29sb3JzID0gJChcIiNhcGV4LWFyZWFcIikuZGF0YShcImNvbG9yc1wiKTtcbmlmIChkYXRhQ29sb3JzKSB7XG4gICAgY29sb3JzID0gZGF0YUNvbG9ycy5zcGxpdChcIixcIik7XG59XG52YXIgb3B0aW9ucyA9IHtcbiAgICBjaGFydDoge1xuICAgICAgICBoZWlnaHQ6IDM4MCxcbiAgICAgICAgdHlwZTogXCJhcmVhXCIsXG4gICAgICAgIHN0YWNrZWQ6IHRydWUsXG4gICAgICAgIGV2ZW50czoge1xuICAgICAgICAgICAgc2VsZWN0aW9uOiBmdW5jdGlvbiAoY2hhcnQsIGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhuZXcgRGF0ZShlLnhheGlzLm1pbikpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIGNvbG9yczogY29sb3JzLFxuICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgfSxcbiAgICBzdHJva2U6IHtcbiAgICAgICAgd2lkdGg6IFsyXSxcbiAgICAgICAgY3VydmU6IFwic21vb3RoXCIsXG4gICAgfSxcblxuICAgIHNlcmllczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcIlNvdXRoXCIsXG4gICAgICAgICAgICBkYXRhOiBnZW5lcmF0ZURheVdpc2VUaW1lU2VyaWVzKFxuICAgICAgICAgICAgICAgIG5ldyBEYXRlKFwiMTEgRmViIDIwMTcgR01UXCIpLmdldFRpbWUoKSxcbiAgICAgICAgICAgICAgICAyMCxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG1pbjogMTAsXG4gICAgICAgICAgICAgICAgICAgIG1heDogNjAsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJOb3J0aFwiLFxuICAgICAgICAgICAgZGF0YTogZ2VuZXJhdGVEYXlXaXNlVGltZVNlcmllcyhcbiAgICAgICAgICAgICAgICBuZXcgRGF0ZShcIjExIEZlYiAyMDE3IEdNVFwiKS5nZXRUaW1lKCksXG4gICAgICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBtaW46IDEwLFxuICAgICAgICAgICAgICAgICAgICBtYXg6IDIwLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICksXG4gICAgICAgIH0sXG5cbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJDZW50cmFsXCIsXG4gICAgICAgICAgICBkYXRhOiBnZW5lcmF0ZURheVdpc2VUaW1lU2VyaWVzKFxuICAgICAgICAgICAgICAgIG5ldyBEYXRlKFwiMTEgRmViIDIwMTcgR01UXCIpLmdldFRpbWUoKSxcbiAgICAgICAgICAgICAgICAyMCxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG1pbjogMTAsXG4gICAgICAgICAgICAgICAgICAgIG1heDogMTUsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKSxcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIGZpbGw6IHtcbiAgICAgICAgdHlwZTogXCJncmFkaWVudFwiLFxuICAgICAgICBncmFkaWVudDoge1xuICAgICAgICAgICAgb3BhY2l0eUZyb206IDAuNixcbiAgICAgICAgICAgIG9wYWNpdHlUbzogMC44LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgbGVnZW5kOiB7XG4gICAgICAgIHBvc2l0aW9uOiBcInRvcFwiLFxuICAgICAgICBob3Jpem9udGFsQWxpZ246IFwibGVmdFwiLFxuICAgIH0sXG4gICAgeGF4aXM6IHtcbiAgICAgICAgdHlwZTogXCJkYXRldGltZVwiLFxuICAgIH0sXG59O1xuXG52YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2FwZXgtYXJlYVwiKSwgb3B0aW9ucyk7XG5cbmNoYXJ0LnJlbmRlcigpO1xuXG4vKlxuICAvLyB0aGlzIGZ1bmN0aW9uIHdpbGwgZ2VuZXJhdGUgb3V0cHV0IGluIHRoaXMgZm9ybWF0XG4gIC8vIGRhdGEgPSBbXG4gICAgICBbdGltZXN0YW1wLCAyM10sXG4gICAgICBbdGltZXN0YW1wLCAzM10sXG4gICAgICBbdGltZXN0YW1wLCAxMl1cbiAgICAgIC4uLlxuICBdXG4gICovXG5mdW5jdGlvbiBnZW5lcmF0ZURheVdpc2VUaW1lU2VyaWVzKGJhc2V2YWwsIGNvdW50LCB5cmFuZ2UpIHtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHNlcmllcyA9IFtdO1xuICAgIHdoaWxlIChpIDwgY291bnQpIHtcbiAgICAgICAgdmFyIHggPSBiYXNldmFsO1xuICAgICAgICB2YXIgeSA9XG4gICAgICAgICAgICBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoeXJhbmdlLm1heCAtIHlyYW5nZS5taW4gKyAxKSkgK1xuICAgICAgICAgICAgeXJhbmdlLm1pbjtcblxuICAgICAgICBzZXJpZXMucHVzaChbeCwgeV0pO1xuICAgICAgICBiYXNldmFsICs9IDg2NDAwMDAwO1xuICAgICAgICBpKys7XG4gICAgfVxuICAgIHJldHVybiBzZXJpZXM7XG59XG5cbi8vXG4vLyBDb2x1bW4gQ2hhcnQgLSAxXG4vL1xudmFyIGNvbG9ycyA9IFtcIiM2NjU4ZGRcIiwgXCIjMWFiYzljXCIsIFwiI0NFRDREQ1wiXTtcbnZhciBkYXRhQ29sb3JzID0gJChcIiNhcGV4LWNvbHVtbi0xXCIpLmRhdGEoXCJjb2xvcnNcIik7XG5pZiAoZGF0YUNvbG9ycykge1xuICAgIGNvbG9ycyA9IGRhdGFDb2xvcnMuc3BsaXQoXCIsXCIpO1xufVxudmFyIG9wdGlvbnMgPSB7XG4gICAgY2hhcnQ6IHtcbiAgICAgICAgaGVpZ2h0OiAzODAsXG4gICAgICAgIHR5cGU6IFwiYmFyXCIsXG4gICAgICAgIHRvb2xiYXI6IHtcbiAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgcGxvdE9wdGlvbnM6IHtcbiAgICAgICAgYmFyOiB7XG4gICAgICAgICAgICBob3Jpem9udGFsOiBmYWxzZSxcbiAgICAgICAgICAgIGVuZGluZ1NoYXBlOiBcInJvdW5kZWRcIixcbiAgICAgICAgICAgIGNvbHVtbldpZHRoOiBcIjU1JVwiLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgZGF0YUxhYmVsczoge1xuICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICB9LFxuICAgIHN0cm9rZToge1xuICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICB3aWR0aDogMixcbiAgICAgICAgY29sb3JzOiBbXCJ0cmFuc3BhcmVudFwiXSxcbiAgICB9LFxuICAgIGNvbG9yczogY29sb3JzLFxuICAgIHNlcmllczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcIk5ldCBQcm9maXRcIixcbiAgICAgICAgICAgIGRhdGE6IFs0NCwgNTUsIDU3LCA1NiwgNjEsIDU4LCA2MywgNjAsIDY2XSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJSZXZlbnVlXCIsXG4gICAgICAgICAgICBkYXRhOiBbNzYsIDg1LCAxMDEsIDk4LCA4NywgMTA1LCA5MSwgMTE0LCA5NF0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IFwiRnJlZSBDYXNoIEZsb3dcIixcbiAgICAgICAgICAgIGRhdGE6IFszNSwgNDEsIDM2LCAyNiwgNDUsIDQ4LCA1MiwgNTMsIDQxXSxcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHhheGlzOiB7XG4gICAgICAgIGNhdGVnb3JpZXM6IFtcbiAgICAgICAgICAgIFwiRmViXCIsXG4gICAgICAgICAgICBcIk1hclwiLFxuICAgICAgICAgICAgXCJBcHJcIixcbiAgICAgICAgICAgIFwiTWF5XCIsXG4gICAgICAgICAgICBcIkp1blwiLFxuICAgICAgICAgICAgXCJKdWxcIixcbiAgICAgICAgICAgIFwiQXVnXCIsXG4gICAgICAgICAgICBcIlNlcFwiLFxuICAgICAgICAgICAgXCJPY3RcIixcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIGxlZ2VuZDoge1xuICAgICAgICBvZmZzZXRZOiA1LFxuICAgIH0sXG4gICAgeWF4aXM6IHtcbiAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICAgIHRleHQ6IFwiJCAodGhvdXNhbmRzKVwiLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgZmlsbDoge1xuICAgICAgICBvcGFjaXR5OiAxLFxuICAgIH0sXG4gICAgZ3JpZDoge1xuICAgICAgICByb3c6IHtcbiAgICAgICAgICAgIGNvbG9yczogW1widHJhbnNwYXJlbnRcIiwgXCJ0cmFuc3BhcmVudFwiXSwgLy8gdGFrZXMgYW4gYXJyYXkgd2hpY2ggd2lsbCBiZSByZXBlYXRlZCBvbiBjb2x1bW5zXG4gICAgICAgICAgICBvcGFjaXR5OiAwLjIsXG4gICAgICAgIH0sXG4gICAgICAgIGJvcmRlckNvbG9yOiBcIiNmMWYzZmFcIixcbiAgICAgICAgcGFkZGluZzoge1xuICAgICAgICAgICAgYm90dG9tOiAxMCxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHRvb2x0aXA6IHtcbiAgICAgICAgeToge1xuICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiJCBcIiArIHZhbCArIFwiIHRob3VzYW5kc1wiO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcblxudmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhcGV4LWNvbHVtbi0xXCIpLCBvcHRpb25zKTtcblxuY2hhcnQucmVuZGVyKCk7XG5cbi8vXG4vLyBDb2x1bW4gQ2hhcnQgLSAyXG4vL1xudmFyIGNvbG9ycyA9IFtcIiM2NjU4ZGRcIl07XG52YXIgZGF0YUNvbG9ycyA9ICQoXCIjYXBleC1jb2x1bW4tMlwiKS5kYXRhKFwiY29sb3JzXCIpO1xuaWYgKGRhdGFDb2xvcnMpIHtcbiAgICBjb2xvcnMgPSBkYXRhQ29sb3JzLnNwbGl0KFwiLFwiKTtcbn1cbnZhciBvcHRpb25zID0ge1xuICAgIGNoYXJ0OiB7XG4gICAgICAgIGhlaWdodDogMzgwLFxuICAgICAgICB0eXBlOiBcImJhclwiLFxuICAgICAgICB0b29sYmFyOiB7XG4gICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHBsb3RPcHRpb25zOiB7XG4gICAgICAgIGJhcjoge1xuICAgICAgICAgICAgZGF0YUxhYmVsczoge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBcInRvcFwiLCAvLyB0b3AsIGNlbnRlciwgYm90dG9tXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgZGF0YUxhYmVsczoge1xuICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWwgKyBcIiVcIjtcbiAgICAgICAgfSxcbiAgICAgICAgb2Zmc2V0WTogLTMwLFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgZm9udFNpemU6IFwiMTJweFwiLFxuICAgICAgICAgICAgY29sb3JzOiBbXCIjMzA0NzU4XCJdLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgY29sb3JzOiBjb2xvcnMsXG4gICAgc2VyaWVzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW5mbGF0aW9uXCIsXG4gICAgICAgICAgICBkYXRhOiBbMi4zLCAzLjEsIDQuMCwgMTAuMSwgNC4wLCAzLjYsIDMuMiwgMi4zLCAxLjQsIDAuOCwgMC41LCAwLjJdLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgeGF4aXM6IHtcbiAgICAgICAgY2F0ZWdvcmllczogW1xuICAgICAgICAgICAgXCJKYW5cIixcbiAgICAgICAgICAgIFwiRmViXCIsXG4gICAgICAgICAgICBcIk1hclwiLFxuICAgICAgICAgICAgXCJBcHJcIixcbiAgICAgICAgICAgIFwiTWF5XCIsXG4gICAgICAgICAgICBcIkp1blwiLFxuICAgICAgICAgICAgXCJKdWxcIixcbiAgICAgICAgICAgIFwiQXVnXCIsXG4gICAgICAgICAgICBcIlNlcFwiLFxuICAgICAgICAgICAgXCJPY3RcIixcbiAgICAgICAgICAgIFwiTm92XCIsXG4gICAgICAgICAgICBcIkRlY1wiLFxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbjogXCJ0b3BcIixcbiAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICBvZmZzZXRZOiAtMTgsXG4gICAgICAgIH0sXG4gICAgICAgIGF4aXNCb3JkZXI6IHtcbiAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgICBheGlzVGlja3M6IHtcbiAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgICBjcm9zc2hhaXJzOiB7XG4gICAgICAgICAgICBmaWxsOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJncmFkaWVudFwiLFxuICAgICAgICAgICAgICAgIGdyYWRpZW50OiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yRnJvbTogXCIjRDhFM0YwXCIsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yVG86IFwiI0JFRDFFNlwiLFxuICAgICAgICAgICAgICAgICAgICBzdG9wczogWzAsIDEwMF0sXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHlGcm9tOiAwLjQsXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHlUbzogMC41LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgb2Zmc2V0WTogLTM1LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgZmlsbDoge1xuICAgICAgICBncmFkaWVudDoge1xuICAgICAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgICAgICBzaGFkZTogXCJsaWdodFwiLFxuICAgICAgICAgICAgdHlwZTogXCJob3Jpem9udGFsXCIsXG4gICAgICAgICAgICBzaGFkZUludGVuc2l0eTogMC4yNSxcbiAgICAgICAgICAgIGdyYWRpZW50VG9Db2xvcnM6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGludmVyc2VDb2xvcnM6IHRydWUsXG4gICAgICAgICAgICBvcGFjaXR5RnJvbTogMSxcbiAgICAgICAgICAgIG9wYWNpdHlUbzogMSxcbiAgICAgICAgICAgIHN0b3BzOiBbNTAsIDAsIDEwMCwgMTAwXSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHlheGlzOiB7XG4gICAgICAgIGF4aXNCb3JkZXI6IHtcbiAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgICBheGlzVGlja3M6IHtcbiAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbCArIFwiJVwiO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHRpdGxlOiB7XG4gICAgICAgIHRleHQ6IFwiTW9udGhseSBJbmZsYXRpb24gaW4gQXJnZW50aW5hLCAyMDAyXCIsXG4gICAgICAgIGZsb2F0aW5nOiB0cnVlLFxuICAgICAgICBvZmZzZXRZOiAzNTAsXG4gICAgICAgIGFsaWduOiBcImNlbnRlclwiLFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgY29sb3I6IFwiIzQ0NFwiLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgZ3JpZDoge1xuICAgICAgICByb3c6IHtcbiAgICAgICAgICAgIGNvbG9yczogW1widHJhbnNwYXJlbnRcIiwgXCJ0cmFuc3BhcmVudFwiXSwgLy8gdGFrZXMgYW4gYXJyYXkgd2hpY2ggd2lsbCBiZSByZXBlYXRlZCBvbiBjb2x1bW5zXG4gICAgICAgICAgICBvcGFjaXR5OiAwLjIsXG4gICAgICAgIH0sXG4gICAgICAgIGJvcmRlckNvbG9yOiBcIiNmMWYzZmFcIixcbiAgICB9LFxufTtcblxudmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhcGV4LWNvbHVtbi0yXCIpLCBvcHRpb25zKTtcblxuY2hhcnQucmVuZGVyKCk7XG5cbi8vXG4vLyBNaXhlZCBDaGFydCAtIDFcbi8vXG52YXIgY29sb3JzID0gW1wiI0NFRDREQ1wiLCBcIiM2NjU4ZGRcIl07XG52YXIgZGF0YUNvbG9ycyA9ICQoXCIjYXBleC1taXhlZC0xXCIpLmRhdGEoXCJjb2xvcnNcIik7XG5pZiAoZGF0YUNvbG9ycykge1xuICAgIGNvbG9ycyA9IGRhdGFDb2xvcnMuc3BsaXQoXCIsXCIpO1xufVxudmFyIG9wdGlvbnMgPSB7XG4gICAgY2hhcnQ6IHtcbiAgICAgICAgaGVpZ2h0OiAzODAsXG4gICAgICAgIHR5cGU6IFwibGluZVwiLFxuICAgIH0sXG4gICAgc3Ryb2tlOiB7XG4gICAgICAgIHdpZHRoOiAyLFxuICAgICAgICBjdXJ2ZTogXCJzbW9vdGhcIixcbiAgICB9LFxuXG4gICAgc2VyaWVzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IFwiVEVBTSBBXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFyZWFcIixcbiAgICAgICAgICAgIGRhdGE6IFs0NCwgNTUsIDMxLCA0NywgMzEsIDQzLCAyNiwgNDEsIDMxLCA0NywgMzNdLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcIlRFQU0gQlwiLFxuICAgICAgICAgICAgdHlwZTogXCJsaW5lXCIsXG4gICAgICAgICAgICBkYXRhOiBbNTUsIDY5LCA0NSwgNjEsIDQzLCA1NCwgMzcsIDUyLCA0NCwgNjEsIDQzXSxcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIGNvbG9yczogY29sb3JzLFxuICAgIGZpbGw6IHtcbiAgICAgICAgdHlwZTogXCJzb2xpZFwiLFxuICAgICAgICBvcGFjaXR5OiBbMC4zNSwgMV0sXG4gICAgfSxcbiAgICBsYWJlbHM6IFtcbiAgICAgICAgXCJEZWMgMDFcIixcbiAgICAgICAgXCJEZWMgMDJcIixcbiAgICAgICAgXCJEZWMgMDNcIixcbiAgICAgICAgXCJEZWMgMDRcIixcbiAgICAgICAgXCJEZWMgMDVcIixcbiAgICAgICAgXCJEZWMgMDZcIixcbiAgICAgICAgXCJEZWMgMDdcIixcbiAgICAgICAgXCJEZWMgMDhcIixcbiAgICAgICAgXCJEZWMgMDkgXCIsXG4gICAgICAgIFwiRGVjIDEwXCIsXG4gICAgICAgIFwiRGVjIDExXCIsXG4gICAgXSxcbiAgICBtYXJrZXJzOiB7XG4gICAgICAgIHNpemU6IDAsXG4gICAgfSxcbiAgICB5YXhpczogW1xuICAgICAgICB7XG4gICAgICAgICAgICB0aXRsZToge1xuICAgICAgICAgICAgICAgIHRleHQ6IFwiU2VyaWVzIEFcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIG9wcG9zaXRlOiB0cnVlLFxuICAgICAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIlNlcmllcyBCXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgdG9vbHRpcDoge1xuICAgICAgICBzaGFyZWQ6IHRydWUsXG4gICAgICAgIGludGVyc2VjdDogZmFsc2UsXG4gICAgICAgIHk6IHtcbiAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHkpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHkudG9GaXhlZCgwKSArIFwiIHBvaW50c1wiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4geTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBsZWdlbmQ6IHtcbiAgICAgICAgb2Zmc2V0WTogNyxcbiAgICB9LFxufTtcblxudmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhcGV4LW1peGVkLTFcIiksIG9wdGlvbnMpO1xuXG5jaGFydC5yZW5kZXIoKTtcblxuLy9cbi8vIEJhciBDaGFydCAtIDFcbi8vXG52YXIgY29sb3JzID0gW1wiIzFhYmM5Y1wiXTtcbnZhciBkYXRhQ29sb3JzID0gJChcIiNhcGV4LWJhci0xXCIpLmRhdGEoXCJjb2xvcnNcIik7XG5pZiAoZGF0YUNvbG9ycykge1xuICAgIGNvbG9ycyA9IGRhdGFDb2xvcnMuc3BsaXQoXCIsXCIpO1xufVxudmFyIG9wdGlvbnMgPSB7XG4gICAgY2hhcnQ6IHtcbiAgICAgICAgaGVpZ2h0OiAzODAsXG4gICAgICAgIHR5cGU6IFwiYmFyXCIsXG4gICAgICAgIHRvb2xiYXI6IHtcbiAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgcGxvdE9wdGlvbnM6IHtcbiAgICAgICAgYmFyOiB7XG4gICAgICAgICAgICBob3Jpem9udGFsOiB0cnVlLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgZGF0YUxhYmVsczoge1xuICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICB9LFxuICAgIHNlcmllczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkYXRhOiBbNDAwLCA0MzAsIDQ0OCwgNDcwLCA1NDAsIDU4MCwgNjkwLCAxMTAwLCAxMjAwLCAxMzgwXSxcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIGNvbG9yczogY29sb3JzLFxuICAgIHhheGlzOiB7XG4gICAgICAgIGNhdGVnb3JpZXM6IFtcbiAgICAgICAgICAgIFwiU291dGggS29yZWFcIixcbiAgICAgICAgICAgIFwiQ2FuYWRhXCIsXG4gICAgICAgICAgICBcIlVuaXRlZCBLaW5nZG9tXCIsXG4gICAgICAgICAgICBcIk5ldGhlcmxhbmRzXCIsXG4gICAgICAgICAgICBcIkl0YWx5XCIsXG4gICAgICAgICAgICBcIkZyYW5jZVwiLFxuICAgICAgICAgICAgXCJKYXBhblwiLFxuICAgICAgICAgICAgXCJVbml0ZWQgU3RhdGVzXCIsXG4gICAgICAgICAgICBcIkNoaW5hXCIsXG4gICAgICAgICAgICBcIkdlcm1hbnlcIixcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHN0YXRlczoge1xuICAgICAgICBob3Zlcjoge1xuICAgICAgICAgICAgZmlsdGVyOiBcIm5vbmVcIixcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIGdyaWQ6IHtcbiAgICAgICAgYm9yZGVyQ29sb3I6IFwiI2YxZjNmYVwiLFxuICAgIH0sXG59O1xuXG52YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2FwZXgtYmFyLTFcIiksIG9wdGlvbnMpO1xuXG5jaGFydC5yZW5kZXIoKTtcblxuLy9cbi8vIEJhciBDaGFydCAtIDJcbi8vXG52YXIgY29sb3JzID0gW1wiIzY2NThkZFwiLCBcIiMxYWJjOWNcIl07XG52YXIgZGF0YUNvbG9ycyA9ICQoXCIjYXBleC1iYXItMlwiKS5kYXRhKFwiY29sb3JzXCIpO1xuaWYgKGRhdGFDb2xvcnMpIHtcbiAgICBjb2xvcnMgPSBkYXRhQ29sb3JzLnNwbGl0KFwiLFwiKTtcbn1cbnZhciBvcHRpb25zID0ge1xuICAgIGNoYXJ0OiB7XG4gICAgICAgIGhlaWdodDogMzgwLFxuICAgICAgICB0eXBlOiBcImJhclwiLFxuICAgICAgICBzdGFja2VkOiB0cnVlLFxuICAgICAgICB0b29sYmFyOiB7XG4gICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIGNvbG9yczogY29sb3JzLFxuICAgIHBsb3RPcHRpb25zOiB7XG4gICAgICAgIGJhcjoge1xuICAgICAgICAgICAgaG9yaXpvbnRhbDogdHJ1ZSxcbiAgICAgICAgICAgIGJhckhlaWdodDogXCI4MCVcIixcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgfSxcbiAgICBzdHJva2U6IHtcbiAgICAgICAgd2lkdGg6IDEsXG4gICAgICAgIGNvbG9yczogW1wiI2ZmZlwiXSxcbiAgICB9LFxuICAgIHNlcmllczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcIk1hbGVzXCIsXG4gICAgICAgICAgICBkYXRhOiBbXG4gICAgICAgICAgICAgICAgMC40LCAwLjY1LCAwLjc2LCAwLjg4LCAxLjUsIDIuMSwgMi45LCAzLjgsIDMuOSwgNC4yLCA0LCA0LjMsXG4gICAgICAgICAgICAgICAgNC4xLCA0LjIsIDQuNSwgMy45LCAzLjUsIDMsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcIkZlbWFsZXNcIixcbiAgICAgICAgICAgIGRhdGE6IFtcbiAgICAgICAgICAgICAgICAtMC44LCAtMS4wNSwgLTEuMDYsIC0xLjE4LCAtMS40LCAtMi4yLCAtMi44NSwgLTMuNywgLTMuOTYsXG4gICAgICAgICAgICAgICAgLTQuMjIsIC00LjMsIC00LjQsIC00LjEsIC00LCAtNC4xLCAtMy40LCAtMy4xLCAtMi44LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIGdyaWQ6IHtcbiAgICAgICAgeGF4aXM6IHtcbiAgICAgICAgICAgIHNob3dMaW5lczogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICB5YXhpczoge1xuICAgICAgICBtaW46IC01LFxuICAgICAgICBtYXg6IDUsXG4gICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgICAvLyB0ZXh0OiAnQWdlJyxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHRvb2x0aXA6IHtcbiAgICAgICAgc2hhcmVkOiBmYWxzZSxcbiAgICAgICAgeDoge1xuICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHk6IHtcbiAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmFicyh2YWwpICsgXCIlXCI7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgeGF4aXM6IHtcbiAgICAgICAgY2F0ZWdvcmllczogW1xuICAgICAgICAgICAgXCI4NStcIixcbiAgICAgICAgICAgIFwiODAtODRcIixcbiAgICAgICAgICAgIFwiNzUtNzlcIixcbiAgICAgICAgICAgIFwiNzAtNzRcIixcbiAgICAgICAgICAgIFwiNjUtNjlcIixcbiAgICAgICAgICAgIFwiNjAtNjRcIixcbiAgICAgICAgICAgIFwiNTUtNTlcIixcbiAgICAgICAgICAgIFwiNTAtNTRcIixcbiAgICAgICAgICAgIFwiNDUtNDlcIixcbiAgICAgICAgICAgIFwiNDAtNDRcIixcbiAgICAgICAgICAgIFwiMzUtMzlcIixcbiAgICAgICAgICAgIFwiMzAtMzRcIixcbiAgICAgICAgICAgIFwiMjUtMjlcIixcbiAgICAgICAgICAgIFwiMjAtMjRcIixcbiAgICAgICAgICAgIFwiMTUtMTlcIixcbiAgICAgICAgICAgIFwiMTAtMTRcIixcbiAgICAgICAgICAgIFwiNS05XCIsXG4gICAgICAgICAgICBcIjAtNFwiLFxuICAgICAgICBdLFxuICAgICAgICB0aXRsZToge1xuICAgICAgICAgICAgdGV4dDogXCJQZXJjZW50XCIsXG4gICAgICAgIH0sXG4gICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguYWJzKE1hdGgucm91bmQodmFsKSkgKyBcIiVcIjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBsZWdlbmQ6IHtcbiAgICAgICAgb2Zmc2V0WTogNyxcbiAgICB9LFxuICAgIGdyaWQ6IHtcbiAgICAgICAgYm9yZGVyQ29sb3I6IFwiI2YxZjNmYVwiLFxuICAgIH0sXG59O1xuXG52YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2FwZXgtYmFyLTJcIiksIG9wdGlvbnMpO1xuXG5jaGFydC5yZW5kZXIoKTtcblxuLy9cbi8vIE1peGVkIENoYXJ0IC0gMlxuLy9cbnZhciBjb2xvcnMgPSBbXCIjNjY1OGRkXCIsIFwiIzFhYmM5Y1wiLCBcIiNmNjcyYTdcIl07XG52YXIgZGF0YUNvbG9ycyA9ICQoXCIjYXBleC1taXhlZC0yXCIpLmRhdGEoXCJjb2xvcnNcIik7XG5pZiAoZGF0YUNvbG9ycykge1xuICAgIGNvbG9ycyA9IGRhdGFDb2xvcnMuc3BsaXQoXCIsXCIpO1xufVxudmFyIG9wdGlvbnMgPSB7XG4gICAgY2hhcnQ6IHtcbiAgICAgICAgaGVpZ2h0OiAzODAsXG4gICAgICAgIHR5cGU6IFwibGluZVwiLFxuICAgICAgICBwYWRkaW5nOiB7XG4gICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIH0sXG4gICAgICAgIHN0YWNrZWQ6IGZhbHNlLFxuICAgICAgICB0b29sYmFyOiB7XG4gICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHN0cm9rZToge1xuICAgICAgICB3aWR0aDogWzAsIDIsIDRdLFxuICAgICAgICBjdXJ2ZTogXCJzbW9vdGhcIixcbiAgICB9LFxuICAgIHBsb3RPcHRpb25zOiB7XG4gICAgICAgIGJhcjoge1xuICAgICAgICAgICAgY29sdW1uV2lkdGg6IFwiNTAlXCIsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBjb2xvcnM6IGNvbG9ycyxcbiAgICBzZXJpZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJUZWFtIEFcIixcbiAgICAgICAgICAgIHR5cGU6IFwiY29sdW1uXCIsXG4gICAgICAgICAgICBkYXRhOiBbMjMsIDExLCAyMiwgMjcsIDEzLCAyMiwgMzcsIDIxLCA0NCwgMjIsIDMwXSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJUZWFtIEJcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYXJlYVwiLFxuICAgICAgICAgICAgZGF0YTogWzQ0LCA1NSwgNDEsIDY3LCAyMiwgNDMsIDIxLCA0MSwgNTYsIDI3LCA0M10sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IFwiVGVhbSBDXCIsXG4gICAgICAgICAgICB0eXBlOiBcImxpbmVcIixcbiAgICAgICAgICAgIGRhdGE6IFszMCwgMjUsIDM2LCAzMCwgNDUsIDM1LCA2NCwgNTIsIDU5LCAzNiwgMzldLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgZmlsbDoge1xuICAgICAgICBvcGFjaXR5OiBbMC44NSwgMC4yNSwgMV0sXG4gICAgICAgIGdyYWRpZW50OiB7XG4gICAgICAgICAgICBpbnZlcnNlQ29sb3JzOiBmYWxzZSxcbiAgICAgICAgICAgIHNoYWRlOiBcImxpZ2h0XCIsXG4gICAgICAgICAgICB0eXBlOiBcInZlcnRpY2FsXCIsXG4gICAgICAgICAgICBvcGFjaXR5RnJvbTogMC44NSxcbiAgICAgICAgICAgIG9wYWNpdHlUbzogMC41NSxcbiAgICAgICAgICAgIHN0b3BzOiBbMCwgMTAwLCAxMDAsIDEwMF0sXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBsYWJlbHM6IFtcbiAgICAgICAgXCIwMS8wMS8yMDAzXCIsXG4gICAgICAgIFwiMDIvMDEvMjAwM1wiLFxuICAgICAgICBcIjAzLzAxLzIwMDNcIixcbiAgICAgICAgXCIwNC8wMS8yMDAzXCIsXG4gICAgICAgIFwiMDUvMDEvMjAwM1wiLFxuICAgICAgICBcIjA2LzAxLzIwMDNcIixcbiAgICAgICAgXCIwNy8wMS8yMDAzXCIsXG4gICAgICAgIFwiMDgvMDEvMjAwM1wiLFxuICAgICAgICBcIjA5LzAxLzIwMDNcIixcbiAgICAgICAgXCIxMC8wMS8yMDAzXCIsXG4gICAgICAgIFwiMTEvMDEvMjAwM1wiLFxuICAgIF0sXG4gICAgbWFya2Vyczoge1xuICAgICAgICBzaXplOiAwLFxuICAgIH0sXG4gICAgbGVnZW5kOiB7XG4gICAgICAgIG9mZnNldFk6IDcsXG4gICAgfSxcbiAgICB4YXhpczoge1xuICAgICAgICB0eXBlOiBcImRhdGV0aW1lXCIsXG4gICAgfSxcbiAgICB5YXhpczoge1xuICAgICAgICB0aXRsZToge1xuICAgICAgICAgICAgdGV4dDogXCJQb2ludHNcIixcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHRvb2x0aXA6IHtcbiAgICAgICAgc2hhcmVkOiB0cnVlLFxuICAgICAgICBpbnRlcnNlY3Q6IGZhbHNlLFxuICAgICAgICB5OiB7XG4gICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uICh5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB5ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB5LnRvRml4ZWQoMCkgKyBcIiBwb2ludHNcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgZ3JpZDoge1xuICAgICAgICBib3JkZXJDb2xvcjogXCIjZjFmM2ZhXCIsXG4gICAgICAgIHBhZGRpbmc6IHtcbiAgICAgICAgICAgIGJvdHRvbTogMTAsXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5cbnZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYXBleC1taXhlZC0yXCIpLCBvcHRpb25zKTtcblxuY2hhcnQucmVuZGVyKCk7XG5cbi8vXG4vLyBNaXhlZCBDaGFydCAtIDNcbi8vXG52YXIgY29sb3JzID0gW1wiIzY2NThkZCwjZWJmMmY2LCNmNjcyYTdcIl07XG52YXIgZGF0YUNvbG9ycyA9ICQoXCIjYXBleC1taXhlZC0zXCIpLmRhdGEoXCJjb2xvcnNcIik7XG5pZiAoZGF0YUNvbG9ycykge1xuICAgIGNvbG9ycyA9IGRhdGFDb2xvcnMuc3BsaXQoXCIsXCIpO1xufVxudmFyIG9wdGlvbnMgPSB7XG4gICAgY2hhcnQ6IHtcbiAgICAgICAgaGVpZ2h0OiAzODAsXG4gICAgICAgIHR5cGU6IFwibGluZVwiLFxuICAgICAgICBzdGFja2VkOiBmYWxzZSxcbiAgICAgICAgdG9vbGJhcjoge1xuICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgIH0sXG4gICAgc3Ryb2tlOiB7XG4gICAgICAgIHdpZHRoOiBbMCwgMCwgM10sXG4gICAgfSxcbiAgICBzZXJpZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJJbmNvbWVcIixcbiAgICAgICAgICAgIHR5cGU6IFwiY29sdW1uXCIsXG4gICAgICAgICAgICBkYXRhOiBbMS40LCAyLCAyLjUsIDEuNSwgMi41LCAyLjgsIDMuOCwgNC42XSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJDYXNoZmxvd1wiLFxuICAgICAgICAgICAgdHlwZTogXCJjb2x1bW5cIixcbiAgICAgICAgICAgIGRhdGE6IFsxLjEsIDMsIDMuMSwgNCwgNC4xLCA0LjksIDYuNSwgOC41XSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJSZXZlbnVlXCIsXG4gICAgICAgICAgICB0eXBlOiBcImxpbmVcIixcbiAgICAgICAgICAgIGRhdGE6IFsyMCwgMjksIDM3LCAzNiwgNDQsIDQ1LCA1MCwgNThdLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgY29sb3JzOiBjb2xvcnMsXG4gICAgeGF4aXM6IHtcbiAgICAgICAgY2F0ZWdvcmllczogWzIwMDksIDIwMTAsIDIwMTEsIDIwMTIsIDIwMTMsIDIwMTQsIDIwMTUsIDIwMTZdLFxuICAgIH0sXG4gICAgeWF4aXM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgYXhpc1RpY2tzOiB7XG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBheGlzQm9yZGVyOiB7XG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjb2xvcjogXCIjNjc1ZGI3XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IFwiIzY3NWRiN1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIkluY29tZSAodGhvdXNhbmQgY3JvcmVzKVwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcblxuICAgICAgICB7XG4gICAgICAgICAgICBheGlzVGlja3M6IHtcbiAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGF4aXNCb3JkZXI6IHtcbiAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBcIiMyM2IzOTdcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogXCIjMjNiMzk3XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvZmZzZXRYOiAxMCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aXRsZToge1xuICAgICAgICAgICAgICAgIHRleHQ6IFwiT3BlcmF0aW5nIENhc2hmbG93ICh0aG91c2FuZCBjcm9yZXMpXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBvcHBvc2l0ZTogdHJ1ZSxcbiAgICAgICAgICAgIGF4aXNUaWNrczoge1xuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgY29sb3I6IFwiI2UzNjQ5OFwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcIiNlMzY0OThcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgICAgICAgdGV4dDogXCJSZXZlbnVlICh0aG91c2FuZCBjcm9yZXMpXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgdG9vbHRpcDoge1xuICAgICAgICBmb2xsb3dDdXJzb3I6IHRydWUsXG4gICAgICAgIHk6IHtcbiAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHkpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHkgKyBcIiB0aG91c2FuZCBjcm9yZXNcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgZ3JpZDoge1xuICAgICAgICBib3JkZXJDb2xvcjogXCIjZjFmM2ZhXCIsXG4gICAgICAgIHBhZGRpbmc6IHtcbiAgICAgICAgICAgIGJvdHRvbTogMTAsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBsZWdlbmQ6IHtcbiAgICAgICAgb2Zmc2V0WTogNyxcbiAgICB9LFxuICAgIHJlc3BvbnNpdmU6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgYnJlYWtwb2ludDogNjAwLFxuICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgIHlheGlzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIF0sXG59O1xuXG52YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2FwZXgtbWl4ZWQtM1wiKSwgb3B0aW9ucyk7XG5cbmNoYXJ0LnJlbmRlcigpO1xuXG4vL1xuLy8gQnViYmxlIENoYXJ0IC0gMVxuLy9cblxuZnVuY3Rpb24gZ2VuZXJhdGVEYXRhKGJhc2V2YWwsIGNvdW50LCB5cmFuZ2UpIHtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHNlcmllcyA9IFtdO1xuICAgIHdoaWxlIChpIDwgY291bnQpIHtcbiAgICAgICAgdmFyIHggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoNzUwIC0gMSArIDEpKSArIDE7XG4gICAgICAgIHZhciB5ID1cbiAgICAgICAgICAgIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICh5cmFuZ2UubWF4IC0geXJhbmdlLm1pbiArIDEpKSArXG4gICAgICAgICAgICB5cmFuZ2UubWluO1xuICAgICAgICB2YXIgeiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICg3NSAtIDE1ICsgMSkpICsgMTU7XG5cbiAgICAgICAgc2VyaWVzLnB1c2goW3gsIHksIHpdKTtcbiAgICAgICAgYmFzZXZhbCArPSA4NjQwMDAwMDtcbiAgICAgICAgaSsrO1xuICAgIH1cbiAgICByZXR1cm4gc2VyaWVzO1xufVxuXG52YXIgY29sb3JzID0gW1wiIzY2NThkZCwjMWFiYzljLCNmNjcyYTdcIl07XG52YXIgZGF0YUNvbG9ycyA9ICQoXCIjYXBleC1idWJibGUtMVwiKS5kYXRhKFwiY29sb3JzXCIpO1xuaWYgKGRhdGFDb2xvcnMpIHtcbiAgICBjb2xvcnMgPSBkYXRhQ29sb3JzLnNwbGl0KFwiLFwiKTtcbn1cbnZhciBvcHRpb25zID0ge1xuICAgIGNoYXJ0OiB7XG4gICAgICAgIGhlaWdodDogMzgwLFxuICAgICAgICB0eXBlOiBcImJ1YmJsZVwiLFxuICAgICAgICB0b29sYmFyOiB7XG4gICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgfSxcbiAgICBzZXJpZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJCdWJibGUgMVwiLFxuICAgICAgICAgICAgZGF0YTogZ2VuZXJhdGVEYXRhKG5ldyBEYXRlKFwiMTEgRmViIDIwMTcgR01UXCIpLmdldFRpbWUoKSwgMjAsIHtcbiAgICAgICAgICAgICAgICBtaW46IDEwLFxuICAgICAgICAgICAgICAgIG1heDogNjAsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJCdWJibGUgMlwiLFxuICAgICAgICAgICAgZGF0YTogZ2VuZXJhdGVEYXRhKG5ldyBEYXRlKFwiMTEgRmViIDIwMTcgR01UXCIpLmdldFRpbWUoKSwgMjAsIHtcbiAgICAgICAgICAgICAgICBtaW46IDEwLFxuICAgICAgICAgICAgICAgIG1heDogNjAsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJCdWJibGUgM1wiLFxuICAgICAgICAgICAgZGF0YTogZ2VuZXJhdGVEYXRhKG5ldyBEYXRlKFwiMTEgRmViIDIwMTcgR01UXCIpLmdldFRpbWUoKSwgMjAsIHtcbiAgICAgICAgICAgICAgICBtaW46IDEwLFxuICAgICAgICAgICAgICAgIG1heDogNjAsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIGZpbGw6IHtcbiAgICAgICAgb3BhY2l0eTogMC44LFxuICAgICAgICBncmFkaWVudDoge1xuICAgICAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBjb2xvcnM6IGNvbG9ycyxcbiAgICB4YXhpczoge1xuICAgICAgICB0aWNrQW1vdW50OiAxMixcbiAgICAgICAgdHlwZTogXCJjYXRlZ29yeVwiLFxuICAgIH0sXG4gICAgeWF4aXM6IHtcbiAgICAgICAgbWF4OiA3MCxcbiAgICB9LFxuICAgIGdyaWQ6IHtcbiAgICAgICAgYm9yZGVyQ29sb3I6IFwiI2YxZjNmYVwiLFxuICAgICAgICBwYWRkaW5nOiB7XG4gICAgICAgICAgICBib3R0b206IDEwLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgbGVnZW5kOiB7XG4gICAgICAgIG9mZnNldFk6IDcsXG4gICAgfSxcbn07XG5cbnZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYXBleC1idWJibGUtMVwiKSwgb3B0aW9ucyk7XG5cbmNoYXJ0LnJlbmRlcigpO1xuXG4vL1xuLy8gQnViYmxlIENoYXJ0IC0gMlxuLy9cblxuLypcbi8vIHRoaXMgZnVuY3Rpb24gd2lsbCBnZW5lcmF0ZSBvdXRwdXQgaW4gdGhpcyBmb3JtYXRcbi8vIGRhdGEgPSBbXG4gIFt0aW1lc3RhbXAsIDIzXSxcbiAgW3RpbWVzdGFtcCwgMzNdLFxuICBbdGltZXN0YW1wLCAxMl1cbiAgLi4uXG5dXG4qL1xuZnVuY3Rpb24gZ2VuZXJhdGVEYXRhMShiYXNldmFsMSwgY291bnQsIHlyYW5nZSkge1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgc2VyaWVzID0gW107XG4gICAgd2hpbGUgKGkgPCBjb3VudCkge1xuICAgICAgICAvL3ZhciB4ID1NYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoNzUwIC0gMSArIDEpKSArIDE7O1xuICAgICAgICB2YXIgeSA9XG4gICAgICAgICAgICBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoeXJhbmdlLm1heCAtIHlyYW5nZS5taW4gKyAxKSkgK1xuICAgICAgICAgICAgeXJhbmdlLm1pbjtcbiAgICAgICAgdmFyIHogPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoNzUgLSAxNSArIDEpKSArIDE1O1xuXG4gICAgICAgIHNlcmllcy5wdXNoKFtiYXNldmFsMSwgeSwgel0pO1xuICAgICAgICBiYXNldmFsMSArPSA4NjQwMDAwMDtcbiAgICAgICAgaSsrO1xuICAgIH1cbiAgICByZXR1cm4gc2VyaWVzO1xufVxuXG52YXIgY29sb3JzID0gW1wiIzY2NThkZCwjMWFiYzljLCNmNjcyYTcsIzZjNzU3ZFwiXTtcbnZhciBkYXRhQ29sb3JzID0gJChcIiNhcGV4LWJ1YmJsZS0yXCIpLmRhdGEoXCJjb2xvcnNcIik7XG5pZiAoZGF0YUNvbG9ycykge1xuICAgIGNvbG9ycyA9IGRhdGFDb2xvcnMuc3BsaXQoXCIsXCIpO1xufVxudmFyIG9wdGlvbnMyID0ge1xuICAgIGNoYXJ0OiB7XG4gICAgICAgIGhlaWdodDogMzgwLFxuICAgICAgICB0eXBlOiBcImJ1YmJsZVwiLFxuICAgICAgICB0b29sYmFyOiB7XG4gICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgfSxcbiAgICBzZXJpZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJQcm9kdWN0IDFcIixcbiAgICAgICAgICAgIGRhdGE6IGdlbmVyYXRlRGF0YTEobmV3IERhdGUoXCIxMSBGZWIgMjAxNyBHTVRcIikuZ2V0VGltZSgpLCAyMCwge1xuICAgICAgICAgICAgICAgIG1pbjogMTAsXG4gICAgICAgICAgICAgICAgbWF4OiA2MCxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcIlByb2R1Y3QgMlwiLFxuICAgICAgICAgICAgZGF0YTogZ2VuZXJhdGVEYXRhMShuZXcgRGF0ZShcIjExIEZlYiAyMDE3IEdNVFwiKS5nZXRUaW1lKCksIDIwLCB7XG4gICAgICAgICAgICAgICAgbWluOiAxMCxcbiAgICAgICAgICAgICAgICBtYXg6IDYwLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IFwiUHJvZHVjdCAzXCIsXG4gICAgICAgICAgICBkYXRhOiBnZW5lcmF0ZURhdGExKG5ldyBEYXRlKFwiMTEgRmViIDIwMTcgR01UXCIpLmdldFRpbWUoKSwgMjAsIHtcbiAgICAgICAgICAgICAgICBtaW46IDEwLFxuICAgICAgICAgICAgICAgIG1heDogNjAsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJQcm9kdWN0IDRcIixcbiAgICAgICAgICAgIGRhdGE6IGdlbmVyYXRlRGF0YTEobmV3IERhdGUoXCIxMSBGZWIgMjAxNyBHTVRcIikuZ2V0VGltZSgpLCAyMCwge1xuICAgICAgICAgICAgICAgIG1pbjogMTAsXG4gICAgICAgICAgICAgICAgbWF4OiA2MCxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgZmlsbDoge1xuICAgICAgICB0eXBlOiBcImdyYWRpZW50XCIsXG4gICAgfSxcbiAgICBjb2xvcnM6IGNvbG9ycyxcbiAgICB4YXhpczoge1xuICAgICAgICB0aWNrQW1vdW50OiAxMixcbiAgICAgICAgdHlwZTogXCJkYXRldGltZVwiLFxuXG4gICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgcm90YXRlOiAwLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgeWF4aXM6IHtcbiAgICAgICAgbWF4OiA3MCxcbiAgICB9LFxuICAgIGxlZ2VuZDoge1xuICAgICAgICBvZmZzZXRZOiA3LFxuICAgIH0sXG4gICAgZ3JpZDoge1xuICAgICAgICBib3JkZXJDb2xvcjogXCIjZjFmM2ZhXCIsXG4gICAgICAgIHBhZGRpbmc6IHtcbiAgICAgICAgICAgIGJvdHRvbTogMTAsXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5cbnZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYXBleC1idWJibGUtMlwiKSwgb3B0aW9uczIpO1xuXG5jaGFydC5yZW5kZXIoKTtcblxuLy9cbi8vIFNjYXR0ZXIgQ2hhcnQgLSAxXG4vL1xuXG52YXIgY29sb3JzID0gW1wiIzFhYmM5Y1wiLCBcIiNmNjcyYTdcIiwgXCIjNmM3NTdkXCJdO1xudmFyIGRhdGFDb2xvcnMgPSAkKFwiI2FwZXgtc2NhdHRlci0xXCIpLmRhdGEoXCJjb2xvcnNcIik7XG5pZiAoZGF0YUNvbG9ycykge1xuICAgIGNvbG9ycyA9IGRhdGFDb2xvcnMuc3BsaXQoXCIsXCIpO1xufVxudmFyIG9wdGlvbnMgPSB7XG4gICAgY2hhcnQ6IHtcbiAgICAgICAgaGVpZ2h0OiAzODAsXG4gICAgICAgIHR5cGU6IFwic2NhdHRlclwiLFxuICAgICAgICB6b29tOiB7XG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICB9LFxuXG4gICAgc2VyaWVzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IFwiU2FtcGxlIEFcIixcbiAgICAgICAgICAgIGRhdGE6IFtcbiAgICAgICAgICAgICAgICBbMTYuNCwgNS40XSxcbiAgICAgICAgICAgICAgICBbMjEuNywgMl0sXG4gICAgICAgICAgICAgICAgWzI1LjQsIDNdLFxuICAgICAgICAgICAgICAgIFsxOSwgMl0sXG4gICAgICAgICAgICAgICAgWzEwLjksIDFdLFxuICAgICAgICAgICAgICAgIFsxMy42LCAzLjJdLFxuICAgICAgICAgICAgICAgIFsxMC45LCA3LjRdLFxuICAgICAgICAgICAgICAgIFsxMC45LCAwXSxcbiAgICAgICAgICAgICAgICBbMTAuOSwgOC4yXSxcbiAgICAgICAgICAgICAgICBbMTYuNCwgMF0sXG4gICAgICAgICAgICAgICAgWzE2LjQsIDEuOF0sXG4gICAgICAgICAgICAgICAgWzEzLjYsIDAuM10sXG4gICAgICAgICAgICAgICAgWzEzLjYsIDBdLFxuICAgICAgICAgICAgICAgIFsyOS45LCAwXSxcbiAgICAgICAgICAgICAgICBbMjcuMSwgMi4zXSxcbiAgICAgICAgICAgICAgICBbMTYuNCwgMF0sXG4gICAgICAgICAgICAgICAgWzEzLjYsIDMuN10sXG4gICAgICAgICAgICAgICAgWzEwLjksIDUuMl0sXG4gICAgICAgICAgICAgICAgWzE2LjQsIDYuNV0sXG4gICAgICAgICAgICAgICAgWzEwLjksIDBdLFxuICAgICAgICAgICAgICAgIFsyNC41LCA3LjFdLFxuICAgICAgICAgICAgICAgIFsxMC45LCAwXSxcbiAgICAgICAgICAgICAgICBbOC4xLCA0LjddLFxuICAgICAgICAgICAgICAgIFsxOSwgMF0sXG4gICAgICAgICAgICAgICAgWzIxLjcsIDEuOF0sXG4gICAgICAgICAgICAgICAgWzI3LjEsIDBdLFxuICAgICAgICAgICAgICAgIFsyNC41LCAwXSxcbiAgICAgICAgICAgICAgICBbMjcuMSwgMF0sXG4gICAgICAgICAgICAgICAgWzI5LjksIDEuNV0sXG4gICAgICAgICAgICAgICAgWzI3LjEsIDAuOF0sXG4gICAgICAgICAgICAgICAgWzIyLjEsIDJdLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJTYW1wbGUgQlwiLFxuICAgICAgICAgICAgZGF0YTogW1xuICAgICAgICAgICAgICAgIFs2LjQsIDEzLjRdLFxuICAgICAgICAgICAgICAgIFsxLjcsIDExXSxcbiAgICAgICAgICAgICAgICBbNS40LCA4XSxcbiAgICAgICAgICAgICAgICBbOSwgMTddLFxuICAgICAgICAgICAgICAgIFsxLjksIDRdLFxuICAgICAgICAgICAgICAgIFszLjYsIDEyLjJdLFxuICAgICAgICAgICAgICAgIFsxLjksIDE0LjRdLFxuICAgICAgICAgICAgICAgIFsxLjksIDldLFxuICAgICAgICAgICAgICAgIFsxLjksIDEzLjJdLFxuICAgICAgICAgICAgICAgIFsxLjQsIDddLFxuICAgICAgICAgICAgICAgIFs2LjQsIDguOF0sXG4gICAgICAgICAgICAgICAgWzMuNiwgNC4zXSxcbiAgICAgICAgICAgICAgICBbMS42LCAxMF0sXG4gICAgICAgICAgICAgICAgWzkuOSwgMl0sXG4gICAgICAgICAgICAgICAgWzcuMSwgMTVdLFxuICAgICAgICAgICAgICAgIFsxLjQsIDBdLFxuICAgICAgICAgICAgICAgIFszLjYsIDEzLjddLFxuICAgICAgICAgICAgICAgIFsxLjksIDE1LjJdLFxuICAgICAgICAgICAgICAgIFs2LjQsIDE2LjVdLFxuICAgICAgICAgICAgICAgIFswLjksIDEwXSxcbiAgICAgICAgICAgICAgICBbNC41LCAxNy4xXSxcbiAgICAgICAgICAgICAgICBbMTAuOSwgMTBdLFxuICAgICAgICAgICAgICAgIFswLjEsIDE0LjddLFxuICAgICAgICAgICAgICAgIFs5LCAxMF0sXG4gICAgICAgICAgICAgICAgWzEyLjcsIDExLjhdLFxuICAgICAgICAgICAgICAgIFsyLjEsIDEwXSxcbiAgICAgICAgICAgICAgICBbMi41LCAxMF0sXG4gICAgICAgICAgICAgICAgWzI3LjEsIDEwXSxcbiAgICAgICAgICAgICAgICBbMi45LCAxMS41XSxcbiAgICAgICAgICAgICAgICBbNy4xLCAxMC44XSxcbiAgICAgICAgICAgICAgICBbMi4xLCAxMl0sXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcIlNhbXBsZSBDXCIsXG4gICAgICAgICAgICBkYXRhOiBbXG4gICAgICAgICAgICAgICAgWzIxLjcsIDNdLFxuICAgICAgICAgICAgICAgIFsyMy42LCAzLjVdLFxuICAgICAgICAgICAgICAgIFsyNC42LCAzXSxcbiAgICAgICAgICAgICAgICBbMjkuOSwgM10sXG4gICAgICAgICAgICAgICAgWzIxLjcsIDIwXSxcbiAgICAgICAgICAgICAgICBbMjMsIDJdLFxuICAgICAgICAgICAgICAgIFsxMC45LCAzXSxcbiAgICAgICAgICAgICAgICBbMjgsIDRdLFxuICAgICAgICAgICAgICAgIFsyNy4xLCAwLjNdLFxuICAgICAgICAgICAgICAgIFsxNi40LCA0XSxcbiAgICAgICAgICAgICAgICBbMTMuNiwgMF0sXG4gICAgICAgICAgICAgICAgWzE5LCA1XSxcbiAgICAgICAgICAgICAgICBbMjIuNCwgM10sXG4gICAgICAgICAgICAgICAgWzI0LjUsIDNdLFxuICAgICAgICAgICAgICAgIFszMi42LCAzXSxcbiAgICAgICAgICAgICAgICBbMjcuMSwgNF0sXG4gICAgICAgICAgICAgICAgWzI5LjYsIDZdLFxuICAgICAgICAgICAgICAgIFszMS42LCA4XSxcbiAgICAgICAgICAgICAgICBbMjEuNiwgNV0sXG4gICAgICAgICAgICAgICAgWzIwLjksIDRdLFxuICAgICAgICAgICAgICAgIFsyMi40LCAwXSxcbiAgICAgICAgICAgICAgICBbMzIuNiwgMTAuM10sXG4gICAgICAgICAgICAgICAgWzI5LjcsIDIwLjhdLFxuICAgICAgICAgICAgICAgIFsyNC41LCAwLjhdLFxuICAgICAgICAgICAgICAgIFsyMS40LCAwXSxcbiAgICAgICAgICAgICAgICBbMjEuNywgNi45XSxcbiAgICAgICAgICAgICAgICBbMjguNiwgNy43XSxcbiAgICAgICAgICAgICAgICBbMTUuNCwgMF0sXG4gICAgICAgICAgICAgICAgWzE4LjEsIDBdLFxuICAgICAgICAgICAgICAgIFszMy40LCAwXSxcbiAgICAgICAgICAgICAgICBbMTYuNCwgMF0sXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgeGF4aXM6IHtcbiAgICAgICAgdGlja0Ftb3VudDogMTAsXG4gICAgfSxcbiAgICB5YXhpczoge1xuICAgICAgICB0aWNrQW1vdW50OiA3LFxuICAgIH0sXG4gICAgY29sb3JzOiBjb2xvcnMsXG4gICAgZ3JpZDoge1xuICAgICAgICBib3JkZXJDb2xvcjogXCIjZjFmM2ZhXCIsXG4gICAgICAgIHBhZGRpbmc6IHtcbiAgICAgICAgICAgIGJvdHRvbTogMTAsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBsZWdlbmQ6IHtcbiAgICAgICAgb2Zmc2V0WTogNyxcbiAgICB9LFxuICAgIHJlc3BvbnNpdmU6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgYnJlYWtwb2ludDogNjAwLFxuICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICAgICAgICAgIHRvb2xiYXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIF0sXG59O1xuXG52YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2FwZXgtc2NhdHRlci0xXCIpLCBvcHRpb25zKTtcblxuY2hhcnQucmVuZGVyKCk7XG5cbi8vXG4vLyBTY2F0dGVyIENoYXJ0IC0gMlxuLy9cblxudmFyIGNvbG9ycyA9IFtcIiMxYWJjOWNcIiwgXCIjZjY3MmE3XCIsIFwiIzZjNzU3ZFwiLCBcIiM2NjU4ZGRcIiwgXCIjNjU1OWNjXCJdO1xudmFyIGRhdGFDb2xvcnMgPSAkKFwiI2FwZXgtc2NhdHRlci0yXCIpLmRhdGEoXCJjb2xvcnNcIik7XG5pZiAoZGF0YUNvbG9ycykge1xuICAgIGNvbG9ycyA9IGRhdGFDb2xvcnMuc3BsaXQoXCIsXCIpO1xufVxuXG52YXIgb3B0aW9ucyA9IHtcbiAgICBjaGFydDoge1xuICAgICAgICBoZWlnaHQ6IDM4MCxcbiAgICAgICAgdHlwZTogXCJzY2F0dGVyXCIsXG4gICAgICAgIHpvb206IHtcbiAgICAgICAgICAgIHR5cGU6IFwieHlcIixcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHNlcmllczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcIlRlYW0gMVwiLFxuICAgICAgICAgICAgZGF0YTogZ2VuZXJhdGVEYXlXaXNlVGltZVNlcmllcyhcbiAgICAgICAgICAgICAgICBuZXcgRGF0ZShcIjExIEZlYiAyMDE3IEdNVFwiKS5nZXRUaW1lKCksXG4gICAgICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBtaW46IDEwLFxuICAgICAgICAgICAgICAgICAgICBtYXg6IDYwLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICksXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IFwiVGVhbSAyXCIsXG4gICAgICAgICAgICBkYXRhOiBnZW5lcmF0ZURheVdpc2VUaW1lU2VyaWVzKFxuICAgICAgICAgICAgICAgIG5ldyBEYXRlKFwiMTEgRmViIDIwMTcgR01UXCIpLmdldFRpbWUoKSxcbiAgICAgICAgICAgICAgICAyMCxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG1pbjogMTAsXG4gICAgICAgICAgICAgICAgICAgIG1heDogNjAsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJUZWFtIDNcIixcbiAgICAgICAgICAgIGRhdGE6IGdlbmVyYXRlRGF5V2lzZVRpbWVTZXJpZXMoXG4gICAgICAgICAgICAgICAgbmV3IERhdGUoXCIxMSBGZWIgMjAxNyBHTVRcIikuZ2V0VGltZSgpLFxuICAgICAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbWluOiAxMCxcbiAgICAgICAgICAgICAgICAgICAgbWF4OiA2MCxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcIlRlYW0gNFwiLFxuICAgICAgICAgICAgZGF0YTogZ2VuZXJhdGVEYXlXaXNlVGltZVNlcmllcyhcbiAgICAgICAgICAgICAgICBuZXcgRGF0ZShcIjExIEZlYiAyMDE3IEdNVFwiKS5nZXRUaW1lKCksXG4gICAgICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBtaW46IDEwLFxuICAgICAgICAgICAgICAgICAgICBtYXg6IDYwLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICksXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IFwiVGVhbSA1XCIsXG4gICAgICAgICAgICBkYXRhOiBnZW5lcmF0ZURheVdpc2VUaW1lU2VyaWVzKFxuICAgICAgICAgICAgICAgIG5ldyBEYXRlKFwiMTEgRmViIDIwMTcgR01UXCIpLmdldFRpbWUoKSxcbiAgICAgICAgICAgICAgICAzMCxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG1pbjogMTAsXG4gICAgICAgICAgICAgICAgICAgIG1heDogNjAsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKSxcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgfSxcbiAgICBjb2xvcnM6IGNvbG9ycyxcbiAgICBncmlkOiB7XG4gICAgICAgIGJvcmRlckNvbG9yOiBcIiNmMWYzZmFcIixcbiAgICAgICAgeGF4aXM6IHtcbiAgICAgICAgICAgIHNob3dMaW5lczogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICAgeWF4aXM6IHtcbiAgICAgICAgICAgIHNob3dMaW5lczogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICAgcGFkZGluZzoge1xuICAgICAgICAgICAgYm90dG9tOiAxMCxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIGxlZ2VuZDoge1xuICAgICAgICBvZmZzZXRZOiA3LFxuICAgIH0sXG4gICAgeGF4aXM6IHtcbiAgICAgICAgdHlwZTogXCJkYXRldGltZVwiLFxuICAgIH0sXG4gICAgeWF4aXM6IHtcbiAgICAgICAgbWF4OiA3MCxcbiAgICB9LFxuICAgIHJlc3BvbnNpdmU6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgYnJlYWtwb2ludDogNjAwLFxuICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICAgICAgICAgIHRvb2xiYXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIF0sXG59O1xuXG52YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2FwZXgtc2NhdHRlci0yXCIpLCBvcHRpb25zKTtcblxuY2hhcnQucmVuZGVyKCk7XG5cbi8vXG4vLyBDYW5kbGVzdGljayBDaGFydCAtIDFcbi8vXG52YXIgY29sb3JzID0gW1wiIzY2NThkZFwiLCBcIiMxYWJjOWNcIl07XG52YXIgZGF0YUNvbG9ycyA9ICQoXCIjYXBleC1jYW5kbGVzdGljay0xXCIpLmRhdGEoXCJjb2xvcnNcIik7XG5pZiAoZGF0YUNvbG9ycykge1xuICAgIGNvbG9ycyA9IGRhdGFDb2xvcnMuc3BsaXQoXCIsXCIpO1xufVxudmFyIG9wdGlvbnMgPSB7XG4gICAgY2hhcnQ6IHtcbiAgICAgICAgaGVpZ2h0OiA0MDAsXG4gICAgICAgIHR5cGU6IFwiY2FuZGxlc3RpY2tcIixcbiAgICB9LFxuICAgIHBsb3RPcHRpb25zOiB7XG4gICAgICAgIGNhbmRsZXN0aWNrOiB7XG4gICAgICAgICAgICBjb2xvcnM6IHtcbiAgICAgICAgICAgICAgICB1cHdhcmQ6IGNvbG9yc1swXSxcbiAgICAgICAgICAgICAgICBkb3dud2FyZDogY29sb3JzWzFdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHNlcmllczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkYXRhOiBzZXJpZXNEYXRhLFxuICAgICAgICB9LFxuICAgIF0sXG5cbiAgICBzdHJva2U6IHtcbiAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgY29sb3JzOiBcIiNmMWYzZmFcIixcbiAgICAgICAgd2lkdGg6IFsxLCA0XSxcbiAgICB9LFxuICAgIHhheGlzOiB7XG4gICAgICAgIHR5cGU6IFwiZGF0ZXRpbWVcIixcbiAgICB9LFxuICAgIGdyaWQ6IHtcbiAgICAgICAgYm9yZGVyQ29sb3I6IFwiI2YxZjNmYVwiLFxuICAgIH0sXG59O1xuXG52YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2FwZXgtY2FuZGxlc3RpY2stMVwiKSxcbiAgICBvcHRpb25zXG4pO1xuXG5jaGFydC5yZW5kZXIoKTtcblxuLy9cbi8vIENhbmRsZXN0aWNrIENoYXJ0IC0gMlxuLy9cbnZhciBjb2xvcnMgPSBbXCIjNjY1OGRkXCIsIFwiI2Y3Yjg0YlwiXTtcbnZhciBkYXRhQ29sb3JzID0gJChcIiNhcGV4LWNhbmRsZXN0aWNrLTJcIikuZGF0YShcImNvbG9yc1wiKTtcbmlmIChkYXRhQ29sb3JzKSB7XG4gICAgY29sb3JzID0gZGF0YUNvbG9ycy5zcGxpdChcIixcIik7XG59XG52YXIgb3B0aW9uc0NhbmRsZXN0aWNrID0ge1xuICAgIGNoYXJ0OiB7XG4gICAgICAgIGhlaWdodDogMjQwLFxuICAgICAgICB0eXBlOiBcImNhbmRsZXN0aWNrXCIsXG4gICAgICAgIHRvb2xiYXI6IHtcbiAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgICB6b29tOiB7XG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHNlcmllczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkYXRhOiBzZXJpZXNEYXRhLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgcGxvdE9wdGlvbnM6IHtcbiAgICAgICAgY2FuZGxlc3RpY2s6IHtcbiAgICAgICAgICAgIGNvbG9yczoge1xuICAgICAgICAgICAgICAgIHVwd2FyZDogY29sb3JzWzBdLFxuICAgICAgICAgICAgICAgIGRvd253YXJkOiBjb2xvcnNbMV0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgeGF4aXM6IHtcbiAgICAgICAgdHlwZTogXCJkYXRldGltZVwiLFxuICAgIH0sXG4gICAgZ3JpZDoge1xuICAgICAgICBib3JkZXJDb2xvcjogXCIjZjFmM2ZhXCIsXG4gICAgfSxcbn07XG5cbnZhciBjaGFydENhbmRsZXN0aWNrID0gbmV3IEFwZXhDaGFydHMoXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhcGV4LWNhbmRsZXN0aWNrLTJcIiksXG4gICAgb3B0aW9uc0NhbmRsZXN0aWNrXG4pO1xuXG5jaGFydENhbmRsZXN0aWNrLnJlbmRlcigpO1xuXG4vL1xuLy8gQ2FuZGxlc3RpY2sgQ2hhcnQgLSAzXG4vL1xudmFyIGNvbG9ycyA9IFtcIiNmNDU0NTRcIiwgXCIjMzdjZGU2XCJdO1xudmFyIGRhdGFDb2xvcnMgPSAkKFwiI2FwZXgtY2FuZGxlc3RpY2stM1wiKS5kYXRhKFwiY29sb3JzXCIpO1xuaWYgKGRhdGFDb2xvcnMpIHtcbiAgICBjb2xvcnMgPSBkYXRhQ29sb3JzLnNwbGl0KFwiLFwiKTtcbn1cbnZhciBvcHRpb25zID0ge1xuICAgIGNoYXJ0OiB7XG4gICAgICAgIGhlaWdodDogMTYwLFxuICAgICAgICB0eXBlOiBcImJhclwiLFxuICAgICAgICB0b29sYmFyOiB7XG4gICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgIGF1dG9TZWxlY3RlZDogXCJzZWxlY3Rpb25cIixcbiAgICAgICAgfSxcbiAgICAgICAgc2VsZWN0aW9uOiB7XG4gICAgICAgICAgICB4YXhpczoge1xuICAgICAgICAgICAgICAgIG1pbjogbmV3IERhdGUoXCIyMCBKYW4gMjAxN1wiKS5nZXRUaW1lKCksXG4gICAgICAgICAgICAgICAgbWF4OiBuZXcgRGF0ZShcIjEwIERlYyAyMDE3XCIpLmdldFRpbWUoKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaWxsOiB7XG4gICAgICAgICAgICAgICAgY29sb3I6IFwiIzZjNzU3ZFwiLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAuNCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICBjb2xvcjogXCIjNmM3NTdkXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBldmVudHM6IHtcbiAgICAgICAgICAgIHNlbGVjdGlvbjogZnVuY3Rpb24gKGNoYXJ0LCBlKSB7XG4gICAgICAgICAgICAgICAgY2hhcnRDYW5kbGVzdGljay51cGRhdGVPcHRpb25zKFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4YXhpczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbjogZS54YXhpcy5taW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4OiBlLnhheGlzLm1heCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgZGF0YUxhYmVsczoge1xuICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICB9LFxuICAgIHBsb3RPcHRpb25zOiB7XG4gICAgICAgIGJhcjoge1xuICAgICAgICAgICAgY29sdW1uV2lkdGg6IFwiODAlXCIsXG4gICAgICAgICAgICBjb2xvcnM6IHtcbiAgICAgICAgICAgICAgICByYW5nZXM6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogLTEwMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB0bzogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBjb2xvcnNbMF0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICB0bzogMTAwMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogY29sb3JzWzFdLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgc2VyaWVzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IFwidm9sdW1lXCIsXG4gICAgICAgICAgICBkYXRhOiBzZXJpZXNEYXRhTGluZWFyLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgeGF4aXM6IHtcbiAgICAgICAgdHlwZTogXCJkYXRldGltZVwiLFxuICAgICAgICBheGlzQm9yZGVyOiB7XG4gICAgICAgICAgICBvZmZzZXRYOiAxMyxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHlheGlzOiB7XG4gICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBncmlkOiB7XG4gICAgICAgIGJvcmRlckNvbG9yOiBcIiNmMWYzZmFcIixcbiAgICB9LFxufTtcblxudmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhcGV4LWNhbmRsZXN0aWNrLTNcIiksXG4gICAgb3B0aW9uc1xuKTtcblxuY2hhcnQucmVuZGVyKCk7XG5cbi8vXG4vLyBQaWUgQ2hhcnQgLTFcbi8vXG52YXIgY29sb3JzID0gW1wiIzY2NThkZFwiLCBcIiM0ZmM2ZTFcIiwgXCIjNGE4MWQ0XCIsIFwiIzAwYjE5ZFwiLCBcIiNmMTU1NmNcIl07XG52YXIgZGF0YUNvbG9ycyA9ICQoXCIjYXBleC1waWUtMVwiKS5kYXRhKFwiY29sb3JzXCIpO1xuaWYgKGRhdGFDb2xvcnMpIHtcbiAgICBjb2xvcnMgPSBkYXRhQ29sb3JzLnNwbGl0KFwiLFwiKTtcbn1cbnZhciBvcHRpb25zID0ge1xuICAgIGNoYXJ0OiB7XG4gICAgICAgIGhlaWdodDogMzIwLFxuICAgICAgICB0eXBlOiBcInBpZVwiLFxuICAgIH0sXG4gICAgc2VyaWVzOiBbNDQsIDU1LCA0MSwgMTcsIDE1XSxcbiAgICBsYWJlbHM6IFtcIlNlcmllcyAxXCIsIFwiU2VyaWVzIDJcIiwgXCJTZXJpZXMgM1wiLCBcIlNlcmllcyA0XCIsIFwiU2VyaWVzIDVcIl0sXG4gICAgY29sb3JzOiBjb2xvcnMsXG4gICAgbGVnZW5kOiB7XG4gICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgIHBvc2l0aW9uOiBcImJvdHRvbVwiLFxuICAgICAgICBob3Jpem9udGFsQWxpZ246IFwiY2VudGVyXCIsXG4gICAgICAgIHZlcnRpY2FsQWxpZ246IFwibWlkZGxlXCIsXG4gICAgICAgIGZsb2F0aW5nOiBmYWxzZSxcbiAgICAgICAgZm9udFNpemU6IFwiMTRweFwiLFxuICAgICAgICBvZmZzZXRYOiAwLFxuICAgICAgICBvZmZzZXRZOiA3LFxuICAgIH0sXG4gICAgcmVzcG9uc2l2ZTogW1xuICAgICAgICB7XG4gICAgICAgICAgICBicmVha3BvaW50OiA2MDAsXG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAyNDAsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgXSxcbn07XG5cbnZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYXBleC1waWUtMVwiKSwgb3B0aW9ucyk7XG5cbmNoYXJ0LnJlbmRlcigpO1xuXG4vL1xuLy8gUGllIENoYXJ0IC0gMlxuLy9cbnZhciBjb2xvcnMgPSBbXCIjNjY1OGRkXCIsIFwiIzRmYzZlMVwiLCBcIiM0YTgxZDRcIiwgXCIjMDBiMTlkXCIsIFwiI2YxNTU2Y1wiXTtcbnZhciBkYXRhQ29sb3JzID0gJChcIiNhcGV4LXBpZS0yXCIpLmRhdGEoXCJjb2xvcnNcIik7XG5pZiAoZGF0YUNvbG9ycykge1xuICAgIGNvbG9ycyA9IGRhdGFDb2xvcnMuc3BsaXQoXCIsXCIpO1xufVxudmFyIG9wdGlvbnMgPSB7XG4gICAgY2hhcnQ6IHtcbiAgICAgICAgaGVpZ2h0OiAzMjAsXG4gICAgICAgIHR5cGU6IFwiZG9udXRcIixcbiAgICB9LFxuICAgIHNlcmllczogWzQ0LCA1NSwgNDEsIDE3LCAxNV0sXG4gICAgbGVnZW5kOiB7XG4gICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgIHBvc2l0aW9uOiBcImJvdHRvbVwiLFxuICAgICAgICBob3Jpem9udGFsQWxpZ246IFwiY2VudGVyXCIsXG4gICAgICAgIHZlcnRpY2FsQWxpZ246IFwibWlkZGxlXCIsXG4gICAgICAgIGZsb2F0aW5nOiBmYWxzZSxcbiAgICAgICAgZm9udFNpemU6IFwiMTRweFwiLFxuICAgICAgICBvZmZzZXRYOiAwLFxuICAgICAgICBvZmZzZXRZOiA3LFxuICAgIH0sXG4gICAgbGFiZWxzOiBbXCJTZXJpZXMgMVwiLCBcIlNlcmllcyAyXCIsIFwiU2VyaWVzIDNcIiwgXCJTZXJpZXMgNFwiLCBcIlNlcmllcyA1XCJdLFxuICAgIGNvbG9yczogY29sb3JzLFxuICAgIHJlc3BvbnNpdmU6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgYnJlYWtwb2ludDogNjAwLFxuICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjQwLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgZmlsbDoge1xuICAgICAgICB0eXBlOiBcImdyYWRpZW50XCIsXG4gICAgfSxcbn07XG5cbnZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYXBleC1waWUtMlwiKSwgb3B0aW9ucyk7XG5cbmNoYXJ0LnJlbmRlcigpO1xuXG4vL1xuLy8gUGllIENoYXJ0IC0gM1xuLy9cbnZhciBjb2xvcnMgPSBbXCIjNjY1OGRkXCIsIFwiIzRmYzZlMVwiLCBcIiM0YTgxZDRcIiwgXCIjMDBiMTlkXCIsIFwiI2YxNTU2Y1wiXTtcbnZhciBkYXRhQ29sb3JzID0gJChcIiNhcGV4LXBpZS0zXCIpLmRhdGEoXCJjb2xvcnNcIik7XG5pZiAoZGF0YUNvbG9ycykge1xuICAgIGNvbG9ycyA9IGRhdGFDb2xvcnMuc3BsaXQoXCIsXCIpO1xufVxudmFyIG9wdGlvbnMgPSB7XG4gICAgY2hhcnQ6IHtcbiAgICAgICAgaGVpZ2h0OiAzMjAsXG4gICAgICAgIHR5cGU6IFwiZG9udXRcIixcbiAgICAgICAgZHJvcFNoYWRvdzoge1xuICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbG9yOiBcIiMxMTFcIixcbiAgICAgICAgICAgIHRvcDogLTEsXG4gICAgICAgICAgICBsZWZ0OiAzLFxuICAgICAgICAgICAgYmx1cjogMyxcbiAgICAgICAgICAgIG9wYWNpdHk6IDAuMixcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHN0cm9rZToge1xuICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICB3aWR0aDogMixcbiAgICB9LFxuICAgIHNlcmllczogWzQ0LCA1NSwgNDEsIDE3LCAxNV0sXG4gICAgY29sb3JzOiBjb2xvcnMsXG4gICAgbGFiZWxzOiBbXCJDb21lZHlcIiwgXCJBY3Rpb25cIiwgXCJTY2lGaVwiLCBcIkRyYW1hXCIsIFwiSG9ycm9yXCJdLFxuICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgZHJvcFNoYWRvdzoge1xuICAgICAgICAgICAgYmx1cjogMyxcbiAgICAgICAgICAgIG9wYWNpdHk6IDAuOCxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIGZpbGw6IHtcbiAgICAgICAgdHlwZTogXCJwYXR0ZXJuXCIsXG4gICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgIHBhdHRlcm46IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICBzdHlsZTogW1xuICAgICAgICAgICAgICAgIFwidmVydGljYWxMaW5lc1wiLFxuICAgICAgICAgICAgICAgIFwic3F1YXJlc1wiLFxuICAgICAgICAgICAgICAgIFwiaG9yaXpvbnRhbExpbmVzXCIsXG4gICAgICAgICAgICAgICAgXCJjaXJjbGVzXCIsXG4gICAgICAgICAgICAgICAgXCJzbGFudGVkTGluZXNcIixcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBzdGF0ZXM6IHtcbiAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgbGVnZW5kOiB7XG4gICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgIHBvc2l0aW9uOiBcImJvdHRvbVwiLFxuICAgICAgICBob3Jpem9udGFsQWxpZ246IFwiY2VudGVyXCIsXG4gICAgICAgIHZlcnRpY2FsQWxpZ246IFwibWlkZGxlXCIsXG4gICAgICAgIGZsb2F0aW5nOiBmYWxzZSxcbiAgICAgICAgZm9udFNpemU6IFwiMTRweFwiLFxuICAgICAgICBvZmZzZXRYOiAwLFxuICAgICAgICBvZmZzZXRZOiA3LFxuICAgIH0sXG4gICAgcmVzcG9uc2l2ZTogW1xuICAgICAgICB7XG4gICAgICAgICAgICBicmVha3BvaW50OiA2MDAsXG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAyNDAsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgXSxcbn07XG5cbnZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYXBleC1waWUtM1wiKSwgb3B0aW9ucyk7XG5cbmNoYXJ0LnJlbmRlcigpO1xuXG4vL1xuLy8gUmFkaWFsYmFyIENoYXJ0IC0xXG4vL1xudmFyIGNvbG9ycyA9IFtcIiM2Yzc1N2RcIl07XG52YXIgZGF0YUNvbG9ycyA9ICQoXCIjYXBleC1yYWRpYWxiYXItMVwiKS5kYXRhKFwiY29sb3JzXCIpO1xuaWYgKGRhdGFDb2xvcnMpIHtcbiAgICBjb2xvcnMgPSBkYXRhQ29sb3JzLnNwbGl0KFwiLFwiKTtcbn1cbnZhciBvcHRpb25zID0ge1xuICAgIGNoYXJ0OiB7XG4gICAgICAgIGhlaWdodDogMzUwLFxuICAgICAgICB0eXBlOiBcInJhZGlhbEJhclwiLFxuICAgIH0sXG4gICAgcGxvdE9wdGlvbnM6IHtcbiAgICAgICAgcmFkaWFsQmFyOiB7XG4gICAgICAgICAgICBob2xsb3c6IHtcbiAgICAgICAgICAgICAgICBzaXplOiBcIjcwJVwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIGNvbG9yczogW1wiIzZjNzU3ZFwiXSxcbiAgICBzZXJpZXM6IFs3MF0sXG4gICAgbGFiZWxzOiBbXCJDUklDS0VUXCJdLFxufTtcblxudmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhcGV4LXJhZGlhbGJhci0xXCIpLFxuICAgIG9wdGlvbnNcbik7XG5cbmNoYXJ0LnJlbmRlcigpO1xuXG4vL1xuLy8gUmFkaWFsYmFyIENoYXJ0IC0gMlxuLy9cbnZhciBjb2xvcnMgPSBbXCIjNjY1OGRkXCIsIFwiI2UzNjQ5OFwiLCBcIiMyM2IzOTdcIiwgXCIjZjdiODRiXCJdO1xudmFyIGRhdGFDb2xvcnMgPSAkKFwiI2FwZXgtcmFkaWFsYmFyLTJcIikuZGF0YShcImNvbG9yc1wiKTtcbmlmIChkYXRhQ29sb3JzKSB7XG4gICAgY29sb3JzID0gZGF0YUNvbG9ycy5zcGxpdChcIixcIik7XG59XG52YXIgb3B0aW9ucyA9IHtcbiAgICBjaGFydDoge1xuICAgICAgICBoZWlnaHQ6IDM1MCxcbiAgICAgICAgdHlwZTogXCJyYWRpYWxCYXJcIixcbiAgICB9LFxuICAgIHBsb3RPcHRpb25zOiB7XG4gICAgICAgIHJhZGlhbEJhcjoge1xuICAgICAgICAgICAgZGF0YUxhYmVsczoge1xuICAgICAgICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IFwiMjJweFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IFwiMTZweFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG90YWw6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiVG90YWxcIixcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQnkgZGVmYXVsdCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIGF2ZXJhZ2Ugb2YgYWxsIHNlcmllcy4gVGhlIGJlbG93IGlzIGp1c3QgYW4gZXhhbXBsZSB0byBzaG93IHRoZSB1c2Ugb2YgY3VzdG9tIGZvcm1hdHRlciBmdW5jdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDI0OTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIGNvbG9yczogY29sb3JzLFxuICAgIHNlcmllczogWzQ0LCA1NSwgNjcsIDgzXSxcbiAgICBsYWJlbHM6IFtcIkFwcGxlc1wiLCBcIk9yYW5nZXNcIiwgXCJCYW5hbmFzXCIsIFwiQmVycmllc1wiXSxcbn07XG5cbnZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKFxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYXBleC1yYWRpYWxiYXItMlwiKSxcbiAgICBvcHRpb25zXG4pO1xuXG5jaGFydC5yZW5kZXIoKTtcblxuLy9cbi8vIFJhZGlhbGJhciBDaGFydCAtIDNcbi8vXG52YXIgY29sb3JzID0gW1wiI2YxNTU2Y1wiXTtcbnZhciBkYXRhQ29sb3JzID0gJChcIiNhcGV4LXJhZGlhbGJhci0zXCIpLmRhdGEoXCJjb2xvcnNcIik7XG5pZiAoZGF0YUNvbG9ycykge1xuICAgIGNvbG9ycyA9IGRhdGFDb2xvcnMuc3BsaXQoXCIsXCIpO1xufVxudmFyIG9wdGlvbnMgPSB7XG4gICAgY2hhcnQ6IHtcbiAgICAgICAgaGVpZ2h0OiAzNzUsXG4gICAgICAgIHR5cGU6IFwicmFkaWFsQmFyXCIsXG4gICAgfSxcbiAgICBwbG90T3B0aW9uczoge1xuICAgICAgICByYWRpYWxCYXI6IHtcbiAgICAgICAgICAgIHN0YXJ0QW5nbGU6IC0xMzUsXG4gICAgICAgICAgICBlbmRBbmdsZTogMTM1LFxuICAgICAgICAgICAgZGF0YUxhYmVsczoge1xuICAgICAgICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IFwiMTZweFwiLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiAxMjAsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiA3NixcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IFwiMjJweFwiLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWwgKyBcIiVcIjtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIGZpbGw6IHtcbiAgICAgICAgZ3JhZGllbnQ6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICBzaGFkZTogXCJkYXJrXCIsXG4gICAgICAgICAgICBzaGFkZUludGVuc2l0eTogMC4xNSxcbiAgICAgICAgICAgIGludmVyc2VDb2xvcnM6IGZhbHNlLFxuICAgICAgICAgICAgb3BhY2l0eUZyb206IDEsXG4gICAgICAgICAgICBvcGFjaXR5VG86IDEsXG4gICAgICAgICAgICBzdG9wczogWzAsIDUwLCA2NSwgOTFdLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgc3Ryb2tlOiB7XG4gICAgICAgIGRhc2hBcnJheTogNCxcbiAgICB9LFxuICAgIGNvbG9yczogY29sb3JzLFxuICAgIHNlcmllczogWzY3XSxcbiAgICBsYWJlbHM6IFtcIk1lZGlhbiBSYXRpb1wiXSxcbiAgICByZXNwb25zaXZlOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDM4MCxcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDI4MCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICBdLFxufTtcblxudmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhcGV4LXJhZGlhbGJhci0zXCIpLFxuICAgIG9wdGlvbnNcbik7XG5cbmNoYXJ0LnJlbmRlcigpO1xuIl0sImZpbGUiOiIuL3Jlc291cmNlcy9qcy9wYWdlcy9hcGV4Y2hhcnRzLmluaXQuanMuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/pages/apexcharts.init.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/pages/apexcharts.init.js"]();
/******/ 	
/******/ })()
;