/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/pages/chartist.init.js":
/*!*********************************************!*\
  !*** ./resources/js/pages/chartist.init.js ***!
  \*********************************************/
/***/ (() => {

eval("/*\nTemplate Name: Ubold - Responsive Bootstrap 4 Admin Dashboard\nAuthor: CoderThemes\nWebsite: https://coderthemes.com/\nContact: support@coderthemes.com\nFile: Chartist charts\n*/\n//smil-animations Chart\nvar chart = new Chartist.Line('#smil-animations', {\n  labels: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],\n  series: [[12, 9, 7, 8, 5, 4, 6, 2, 3, 3, 4, 6], [4, 5, 3, 7, 3, 5, 5, 3, 4, 4, 5, 5], [5, 3, 4, 5, 6, 3, 3, 4, 5, 6, 3, 4], [3, 4, 5, 6, 7, 6, 4, 5, 6, 7, 6, 3]]\n}, {\n  low: 0,\n  plugins: [Chartist.plugins.tooltip()]\n}); // Let's put a sequence number aside so we can use it in the event callbacks\n\nvar seq = 0,\n    delays = 80,\n    durations = 500; // Once the chart is fully created we reset the sequence\n\nchart.on('created', function () {\n  seq = 0;\n}); // On each drawn element by Chartist we use the Chartist.Svg API to trigger SMIL animations\n\nchart.on('draw', function (data) {\n  seq++;\n\n  if (data.type === 'line') {\n    // If the drawn element is a line we do a simple opacity fade in. This could also be achieved using CSS3 animations.\n    data.element.animate({\n      opacity: {\n        // The delay when we like to start the animation\n        begin: seq * delays + 1000,\n        // Duration of the animation\n        dur: durations,\n        // The value where the animation should start\n        from: 0,\n        // The value where it should end\n        to: 1\n      }\n    });\n  } else if (data.type === 'label' && data.axis === 'x') {\n    data.element.animate({\n      y: {\n        begin: seq * delays,\n        dur: durations,\n        from: data.y + 100,\n        to: data.y,\n        // We can specify an easing function from Chartist.Svg.Easing\n        easing: 'easeOutQuart'\n      }\n    });\n  } else if (data.type === 'label' && data.axis === 'y') {\n    data.element.animate({\n      x: {\n        begin: seq * delays,\n        dur: durations,\n        from: data.x - 100,\n        to: data.x,\n        easing: 'easeOutQuart'\n      }\n    });\n  } else if (data.type === 'point') {\n    data.element.animate({\n      x1: {\n        begin: seq * delays,\n        dur: durations,\n        from: data.x - 10,\n        to: data.x,\n        easing: 'easeOutQuart'\n      },\n      x2: {\n        begin: seq * delays,\n        dur: durations,\n        from: data.x - 10,\n        to: data.x,\n        easing: 'easeOutQuart'\n      },\n      opacity: {\n        begin: seq * delays,\n        dur: durations,\n        from: 0,\n        to: 1,\n        easing: 'easeOutQuart'\n      }\n    });\n  } else if (data.type === 'grid') {\n    // Using data.axis we get x or y which we can use to construct our animation definition objects\n    var pos1Animation = {\n      begin: seq * delays,\n      dur: durations,\n      from: data[data.axis.units.pos + '1'] - 30,\n      to: data[data.axis.units.pos + '1'],\n      easing: 'easeOutQuart'\n    };\n    var pos2Animation = {\n      begin: seq * delays,\n      dur: durations,\n      from: data[data.axis.units.pos + '2'] - 100,\n      to: data[data.axis.units.pos + '2'],\n      easing: 'easeOutQuart'\n    };\n    var animations = {};\n    animations[data.axis.units.pos + '1'] = pos1Animation;\n    animations[data.axis.units.pos + '2'] = pos2Animation;\n    animations['opacity'] = {\n      begin: seq * delays,\n      dur: durations,\n      from: 0,\n      to: 1,\n      easing: 'easeOutQuart'\n    };\n    data.element.animate(animations);\n  }\n}); // For the sake of the example we update the chart every time it's created with a delay of 10 seconds\n\nchart.on('created', function () {\n  if (window.__exampleAnimateTimeout) {\n    clearTimeout(window.__exampleAnimateTimeout);\n    window.__exampleAnimateTimeout = null;\n  }\n\n  window.__exampleAnimateTimeout = setTimeout(chart.update.bind(chart), 12000);\n}); //Simple line chart\n\nnew Chartist.Line('#simple-line-chart', {\n  labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n  series: [[12, 9, 7, 8, 5], [2, 1, 3.5, 7, 3], [1, 3, 4, 5, 6]]\n}, {\n  fullWidth: true,\n  chartPadding: {\n    right: 40\n  },\n  plugins: [Chartist.plugins.tooltip()]\n}); //Line Scatter Diagram\n\nvar times = function times(n) {\n  return Array.apply(null, new Array(n));\n};\n\nvar data = times(52).map(Math.random).reduce(function (data, rnd, index) {\n  data.labels.push(index + 1);\n  data.series.forEach(function (series) {\n    series.push(Math.random() * 100);\n  });\n  return data;\n}, {\n  labels: [],\n  series: times(4).map(function () {\n    return new Array();\n  })\n});\nvar options = {\n  showLine: false,\n  axisX: {\n    labelInterpolationFnc: function labelInterpolationFnc(value, index) {\n      return index % 13 === 0 ? 'W' + value : null;\n    }\n  }\n};\nvar responsiveOptions = [['screen and (min-width: 640px)', {\n  axisX: {\n    labelInterpolationFnc: function labelInterpolationFnc(value, index) {\n      return index % 4 === 0 ? 'W' + value : null;\n    }\n  }\n}]];\nnew Chartist.Line('#scatter-diagram', data, options, responsiveOptions); //Line chart with tooltips\n//Line chart with tooltips\n\nnew Chartist.Line('#line-chart-tooltips', {\n  labels: ['1', '2', '3', '4', '5', '6'],\n  series: [{\n    name: 'Fibonacci sequence',\n    data: [1, 2, 3, 5, 8, 13]\n  }, {\n    name: 'Golden section',\n    data: [1, 1.618, 2.618, 4.236, 6.854, 11.09]\n  }]\n}, {\n  plugins: [Chartist.plugins.tooltip()]\n});\nvar $chart = $('#line-chart-tooltips');\nvar $toolTip = $chart.append('<div class=\"tooltip\"></div>').find('.tooltip').hide();\n$chart.on('mouseenter', '.ct-point', function () {\n  var $point = $(this),\n      value = $point.attr('ct:value'),\n      seriesName = $point.parent().attr('ct:series-name');\n  $toolTip.html(seriesName + '<br>' + value).show();\n});\n$chart.on('mouseleave', '.ct-point', function () {\n  $toolTip.hide();\n});\n$chart.on('mousemove', function (event) {\n  $toolTip.css({\n    left: (event.offsetX || event.originalEvent.layerX) - $toolTip.width() / 2 - 10,\n    top: (event.offsetY || event.originalEvent.layerY) - $toolTip.height() - 40\n  });\n}); //Line chart with area\n\nnew Chartist.Line('#chart-with-area', {\n  labels: [1, 2, 3, 4, 5, 6, 7, 8],\n  series: [[5, 9, 7, 8, 5, 3, 5, 4]]\n}, {\n  low: 0,\n  showArea: true,\n  plugins: [Chartist.plugins.tooltip()]\n}); //Bi-polar Line chart with area only\n\nnew Chartist.Line('#bi-polar-line', {\n  labels: [1, 2, 3, 4, 5, 6, 7, 8],\n  series: [[1, 2, 3, 1, -2, 0, 1, 0], [-2, -1, -2, -1, -2.5, -1, -2, -1], [0, 0, 0, 1, 2, 2.5, 2, 1], [2.5, 2, 1, 0.5, 1, 0.5, -1, -2.5]]\n}, {\n  high: 3,\n  low: -3,\n  showArea: true,\n  showLine: false,\n  showPoint: false,\n  fullWidth: true,\n  axisX: {\n    showLabel: false,\n    showGrid: false\n  },\n  plugins: [Chartist.plugins.tooltip()]\n}); //SVG Path animation\n\nvar chart = new Chartist.Line('#svg-animation', {\n  labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  series: [[1, 5, 2, 5, 4, 3], [2, 3, 4, 8, 1, 2], [5, 4, 3, 2, 1, 0.5]]\n}, {\n  low: 0,\n  showArea: true,\n  showPoint: false,\n  fullWidth: true\n});\nchart.on('draw', function (data) {\n  if (data.type === 'line' || data.type === 'area') {\n    data.element.animate({\n      d: {\n        begin: 2000 * data.index,\n        dur: 2000,\n        from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),\n        to: data.path.clone().stringify(),\n        easing: Chartist.Svg.Easing.easeOutQuint\n      }\n    });\n  }\n}); //Line Interpolation / Smoothing\n\nvar chart = new Chartist.Line('#line-smoothing', {\n  labels: [1, 2, 3, 4, 5],\n  series: [[1, 5, 10, 0, 1], [10, 15, 0, 1, 2]]\n}, {\n  // Remove this configuration to see that chart rendered with cardinal spline interpolation\n  // Sometimes, on large jumps in data values, it's better to use simple smoothing.\n  lineSmooth: Chartist.Interpolation.simple({\n    divisor: 2\n  }),\n  fullWidth: true,\n  chartPadding: {\n    right: 20\n  },\n  low: 0,\n  plugins: [Chartist.plugins.tooltip()]\n}); //Bi-polar bar chart\n\nvar data = {\n  labels: ['W1', 'W2', 'W3', 'W4', 'W5', 'W6', 'W7', 'W8', 'W9', 'W10'],\n  series: [[1, 2, 4, 8, 6, -2, -1, -4, -6, -2]]\n};\nvar options = {\n  high: 10,\n  low: -10,\n  axisX: {\n    labelInterpolationFnc: function labelInterpolationFnc(value, index) {\n      return index % 2 === 0 ? value : null;\n    }\n  },\n  plugins: [Chartist.plugins.tooltip()]\n};\nnew Chartist.Bar('#bi-polar-bar', data, options); //Overlapping bars on mobile\n\nvar data = {\n  labels: ['Jan', 'Feb', 'Mar', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  series: [[5, 4, 3, 7, 5, 10, 3, 4, 8, 10, 6, 8], [3, 2, 9, 5, 4, 6, 4, 6, 7, 8, 7, 4]]\n};\nvar options = {\n  seriesBarDistance: 10\n};\nvar responsiveOptions = [['screen and (max-width: 640px)', {\n  seriesBarDistance: 5,\n  axisX: {\n    labelInterpolationFnc: function labelInterpolationFnc(value) {\n      return value[0];\n    }\n  }\n}]];\nnew Chartist.Bar('#overlapping-bars', data, options, responsiveOptions); //Multi-line labels\n\nnew Chartist.Bar('#multi-line-chart', {\n  labels: ['First quarter of the year', 'Second quarter of the year', 'Third quarter of the year', 'Fourth quarter of the year'],\n  series: [[60000, 40000, 80000, 70000], [40000, 30000, 70000, 65000], [8000, 3000, 10000, 6000]]\n}, {\n  seriesBarDistance: 10,\n  axisX: {\n    offset: 60\n  },\n  axisY: {\n    offset: 80,\n    labelInterpolationFnc: function labelInterpolationFnc(value) {\n      return value + ' CHF';\n    },\n    scaleMinSpace: 15\n  },\n  plugins: [Chartist.plugins.tooltip()]\n}); //Stacked bar chart\n\nnew Chartist.Bar('#stacked-bar-chart', {\n  labels: ['Q1', 'Q2', 'Q3', 'Q4'],\n  series: [[800000, 1200000, 1400000, 1300000], [200000, 400000, 500000, 300000], [160000, 290000, 410000, 600000]]\n}, {\n  stackBars: true,\n  axisY: {\n    labelInterpolationFnc: function labelInterpolationFnc(value) {\n      return value / 1000 + 'k';\n    }\n  },\n  plugins: [Chartist.plugins.tooltip()]\n}).on('draw', function (data) {\n  if (data.type === 'bar') {\n    data.element.attr({\n      style: 'stroke-width: 30px'\n    });\n  }\n}); //Horizontal bar chart\n\nnew Chartist.Bar('#horizontal-bar-chart', {\n  labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n  series: [[5, 4, 3, 7, 5, 10, 3], [3, 2, 9, 5, 4, 6, 4]]\n}, {\n  seriesBarDistance: 10,\n  reverseData: true,\n  horizontalBars: true,\n  axisY: {\n    offset: 70\n  },\n  plugins: [Chartist.plugins.tooltip()]\n}); // Extreme responsive configuration\n\nnew Chartist.Bar('#extreme-chart', {\n  labels: ['Quarter 1', 'Quarter 2', 'Quarter 3', 'Quarter 4'],\n  series: [[5, 4, 3, 7], [3, 2, 9, 5], [1, 5, 8, 4], [2, 3, 4, 6], [4, 1, 2, 1]]\n}, {\n  // Default mobile configuration\n  stackBars: true,\n  axisX: {\n    labelInterpolationFnc: function labelInterpolationFnc(value) {\n      return value.split(/\\s+/).map(function (word) {\n        return word[0];\n      }).join('');\n    }\n  },\n  axisY: {\n    offset: 20\n  },\n  plugins: [Chartist.plugins.tooltip()]\n}, [// Options override for media > 400px\n['screen and (min-width: 400px)', {\n  reverseData: true,\n  horizontalBars: true,\n  axisX: {\n    labelInterpolationFnc: Chartist.noop\n  },\n  axisY: {\n    offset: 60\n  }\n}], // Options override for media > 800px\n['screen and (min-width: 800px)', {\n  stackBars: false,\n  seriesBarDistance: 10\n}], // Options override for media > 1000px\n['screen and (min-width: 1000px)', {\n  reverseData: false,\n  horizontalBars: false,\n  seriesBarDistance: 15\n}]]); //Distributed series\n\nnew Chartist.Bar('#distributed-series', {\n  labels: ['XS', 'S', 'M', 'L', 'XL', 'XXL', 'XXXL'],\n  series: [20, 60, 120, 200, 180, 20, 10]\n}, {\n  distributeSeries: true,\n  plugins: [Chartist.plugins.tooltip()]\n}); //Label placement\n\nnew Chartist.Bar('#label-placement-chart', {\n  labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n  series: [[5, 4, 3, 7, 5, 10, 3], [3, 2, 9, 5, 4, 6, 4]]\n}, {\n  axisX: {\n    // On the x-axis start means top and end means bottom\n    position: 'start'\n  },\n  axisY: {\n    // On the y-axis start means left and end means right\n    position: 'end'\n  },\n  plugins: [Chartist.plugins.tooltip()]\n}); //Animating a Donut with Svg.animate\n\nvar chart = new Chartist.Pie('#animating-donut', {\n  series: [10, 20, 50, 20, 5, 50, 15],\n  labels: [1, 2, 3, 4, 5, 6, 7]\n}, {\n  donut: true,\n  showLabel: false,\n  plugins: [Chartist.plugins.tooltip()]\n});\nchart.on('draw', function (data) {\n  if (data.type === 'slice') {\n    // Get the total path length in order to use for dash array animation\n    var pathLength = data.element._node.getTotalLength(); // Set a dasharray that matches the path length as prerequisite to animate dashoffset\n\n\n    data.element.attr({\n      'stroke-dasharray': pathLength + 'px ' + pathLength + 'px'\n    }); // Create animation definition while also assigning an ID to the animation for later sync usage\n\n    var animationDefinition = {\n      'stroke-dashoffset': {\n        id: 'anim' + data.index,\n        dur: 1000,\n        from: -pathLength + 'px',\n        to: '0px',\n        easing: Chartist.Svg.Easing.easeOutQuint,\n        // We need to use `fill: 'freeze'` otherwise our animation will fall back to initial (not visible)\n        fill: 'freeze'\n      }\n    }; // If this was not the first slice, we need to time the animation so that it uses the end sync event of the previous animation\n\n    if (data.index !== 0) {\n      animationDefinition['stroke-dashoffset'].begin = 'anim' + (data.index - 1) + '.end';\n    } // We need to set an initial value before the animation starts as we are not in guided mode which would do that for us\n\n\n    data.element.attr({\n      'stroke-dashoffset': -pathLength + 'px'\n    }); // We can't use guided mode as the animations need to rely on setting begin manually\n    // See http://gionkunz.github.io/chartist-js/api-documentation.html#chartistsvg-function-animate\n\n    data.element.animate(animationDefinition, false);\n  }\n}); // For the sake of the example we update the chart every time it's created with a delay of 8 seconds\n\nchart.on('created', function () {\n  if (window.__anim21278907124) {\n    clearTimeout(window.__anim21278907124);\n    window.__anim21278907124 = null;\n  }\n\n  window.__anim21278907124 = setTimeout(chart.update.bind(chart), 10000);\n}); //Simple pie chart\n\nvar data = {\n  series: [5, 3, 4]\n};\n\nvar sum = function sum(a, b) {\n  return a + b;\n};\n\nnew Chartist.Pie('#simple-pie', data, {\n  labelInterpolationFnc: function labelInterpolationFnc(value) {\n    return Math.round(value / data.series.reduce(sum) * 100) + '%';\n  }\n}); //Pie chart with custom labels\n\nvar data = {\n  labels: ['Bananas', 'Apples', 'Grapes'],\n  series: [20, 15, 40]\n};\nvar options = {\n  labelInterpolationFnc: function labelInterpolationFnc(value) {\n    return value[0];\n  }\n};\nvar responsiveOptions = [['screen and (min-width: 640px)', {\n  chartPadding: 30,\n  labelOffset: 100,\n  labelDirection: 'explode',\n  labelInterpolationFnc: function labelInterpolationFnc(value) {\n    return value;\n  }\n}], ['screen and (min-width: 1024px)', {\n  labelOffset: 80,\n  chartPadding: 20\n}]];\nnew Chartist.Pie('#pie-chart', data, options, responsiveOptions); //Gauge chart\n\nnew Chartist.Pie('#gauge-chart', {\n  series: [20, 10, 30, 40]\n}, {\n  donut: true,\n  donutWidth: 60,\n  startAngle: 270,\n  total: 200,\n  showLabel: false,\n  plugins: [Chartist.plugins.tooltip()]\n}); // Different configuration for different series\n\nvar chart = new Chartist.Line('#different-series', {\n  labels: ['1', '2', '3', '4', '5', '6', '7', '8'],\n  // Naming the series with the series object array notation\n  series: [{\n    name: 'series-1',\n    data: [5, 2, -4, 2, 0, -2, 5, -3]\n  }, {\n    name: 'series-2',\n    data: [4, 3, 5, 3, 1, 3, 6, 4]\n  }, {\n    name: 'series-3',\n    data: [2, 4, 3, 1, 4, 5, 3, 2]\n  }]\n}, {\n  fullWidth: true,\n  // Within the series options you can use the series names\n  // to specify configuration that will only be used for the\n  // specific series.\n  series: {\n    'series-1': {\n      lineSmooth: Chartist.Interpolation.step()\n    },\n    'series-2': {\n      lineSmooth: Chartist.Interpolation.simple(),\n      showArea: true\n    },\n    'series-3': {\n      showPoint: false\n    }\n  },\n  plugins: [Chartist.plugins.tooltip()]\n}, [// You can even use responsive configuration overrides to\n// customize your series configuration even further!\n['screen and (max-width: 320px)', {\n  series: {\n    'series-1': {\n      lineSmooth: Chartist.Interpolation.none()\n    },\n    'series-2': {\n      lineSmooth: Chartist.Interpolation.none(),\n      showArea: false\n    },\n    'series-3': {\n      lineSmooth: Chartist.Interpolation.none(),\n      showPoint: true\n    }\n  }\n}]]); //SVG Animations chart\n\nvar chart = new Chartist.Line('#svg-dot-animation', {\n  labels: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],\n  series: [[12, 4, 2, 8, 5, 4, 6, 2, 3, 3, 4, 6], [4, 8, 9, 3, 7, 2, 10, 5, 8, 1, 7, 10]]\n}, {\n  low: 0,\n  showLine: false,\n  axisX: {\n    showLabel: false,\n    offset: 0\n  },\n  axisY: {\n    showLabel: false,\n    offset: 0\n  },\n  plugins: [Chartist.plugins.tooltip()]\n}); // Let's put a sequence number aside so we can use it in the event callbacks\n\nvar seq = 0; // Once the chart is fully created we reset the sequence\n\nchart.on('created', function () {\n  seq = 0;\n}); // On each drawn element by Chartist we use the Chartist.Svg API to trigger SMIL animations\n\nchart.on('draw', function (data) {\n  if (data.type === 'point') {\n    // If the drawn element is a line we do a simple opacity fade in. This could also be achieved using CSS3 animations.\n    data.element.animate({\n      opacity: {\n        // The delay when we like to start the animation\n        begin: seq++ * 80,\n        // Duration of the animation\n        dur: 500,\n        // The value where the animation should start\n        from: 0,\n        // The value where it should end\n        to: 1\n      },\n      x1: {\n        begin: seq++ * 80,\n        dur: 500,\n        from: data.x - 100,\n        to: data.x,\n        // You can specify an easing function name or use easing functions from Chartist.Svg.Easing directly\n        easing: Chartist.Svg.Easing.easeOutQuart\n      }\n    });\n  }\n}); // For the sake of the example we update the chart every time it's created with a delay of 8 seconds\n\nchart.on('created', function () {\n  if (window.__anim0987432598723) {\n    clearTimeout(window.__anim0987432598723);\n    window.__anim0987432598723 = null;\n  }\n\n  window.__anim0987432598723 = setTimeout(chart.update.bind(chart), 8000);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/pages/chartist.init.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/pages/chartist.init.js"]();
/******/ 	
/******/ })()
;